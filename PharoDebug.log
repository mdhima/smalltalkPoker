THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #show
24 January 2021 1:18:40.657761 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #show
	Receiver: 1
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #printNl
24 January 2021 1:23:46.558761 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #printNl
	Receiver: 'Hello, world'
	Arguments and temporary variables: 
		aMessage: 	printNl
		exception: 	MessageNotUnderstood: ByteString>> #printNl
		resumeValue: 	ni
	Receiver's instance variables: 
'Hello, world'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ 'Hello, world' printNl
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(579519488)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Random class did not understand #between:and:
24 January 2021 1:39:38.211761 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Random class(Object)>>doesNotUnderstand: #between:and:
	Receiver: Random
	Arguments and temporary variables: 
		aMessage: 	between: 1 and: 52
		exception: 	MessageNotUnderstood: Random class>> #between:and:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->Random>>#initialize #next->Random>>...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SharedRandom}
		name: 	#Random
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Random-Core-Base'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(nil nil nil nil nil nil nil nil nil)
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista |
	lista := Array new: 9.
	^ 1 to: 9 do: [ :i | lista at: i ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(579519488)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(579519488)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph teTHERE_BE_DRAGONS_HERE
Instance of Dictionary did not understand #Transcript
24 January 2021 1:56:20.933761 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary(Object)>>doesNotUnderstand: #Transcript
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aMessage: 	Transcript
		exception: 	MessageNotUnderstood: Dictionary>> #Transcript
		resumeValue: 	ni
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(50 3 47 47 14 25 41 10 2)
		deckwinner: 	nil
		shuf: 	nil
		values: 	a Dictionary(
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf values |
	Transcript clear.
	lista := Array ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(579519488)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(579519488)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1035465728)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(579519488)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (568@316)
		owner: 	a TransformWithLayoutMorph(73831680)
		submorphs: 	an Array(a RubPrimarySelectionMorph(168513792) a RubCursor(226939392...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1044685056) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(717507840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(226939392)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(195698944))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1035465728)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(196512768) named: Pl...etc...
		lastStepTime: 	7435888
		lastStepMessage: 	nil
		lastCycleTime: 	7435914
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(226939392)))
		lastAlarmTime: 	7435888
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(976@712)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)\Pharo 8.0 - 64bit (stable).changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
25 January 2021 4:47:25.006444 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Administrator\Documents\Pharo\images\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	fals
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-25T16:47:24.699444-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)\Pharo 8.0 - 64bit (stable).changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
26 January 2021 9:38:05.433655 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Administrator\Documents\Pharo\images\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	fals
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T09:38:05.147655-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

TTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 9:44:10.757655 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2715
		right: 	2732
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 9:45:16.502668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 9:45:17.167668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
	THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 9:56:57.279668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	TTHERE_BE_DRAGONS_HERE
#clubs is missing, and does not understand #,
26 January 2021 11:10:41.319668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject>>doesNotUnderstand: #,
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	, nil
		exception: 	VariableNotDeclared: receiver of "," is nil
		resumeValue: 	nil
		node: 	RBVariableNode(clubs
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript
		show: clubs , diamonds , hearts , spades;
		cr
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
26 January 2021 11:14:50.804668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: #('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
	Arguments and temporary variables: 
		aMessage: 	at: 1 at: 9
		exception: 	MessageNotUnderstood: Array>> #at:at:
		resumeValue: 	ni
	Receiver's instance variables: 
#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
26 January 2021 11:16:21.055668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: #('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
	Arguments and temporary variables: 
		aMessage: 	at: 1 at: 9
		exception: 	MessageNotUnderstood: Array>> #at:at:
		resumeValue: 	ni
	Receiver's instance variables: 
#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMoTHERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
26 January 2021 11:16:46.778668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: #('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
	Arguments and temporary variables: 
		aMessage: 	at: 1 at: 9
		exception: 	MessageNotUnderstood: Array>> #at:at:
		resumeValue: 	ni
	Receiver's instance variables: 
#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (803@2786)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnTHERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
26 January 2021 11:17:15.214668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: #('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
	Arguments and temporary variables: 
		aMessage: 	at: 1 at: 9
		exception: 	MessageNotUnderstood: Array>> #at:at:
		resumeValue: 	ni
	Receiver's instance variables: 
#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (803@2805)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(666760960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(822585600))
		getMenuPolicy: 	a RubEditingArea(304834304)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
26 January 2021 11:17:34.235668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: #('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
	Arguments and temporary variables: 
		aMessage: 	at: 1 at: 9
		exception: 	MessageNotUnderstood: Array>> #at:at:
		resumeValue: 	ni
	Receiver's instance variables: 
#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (803@2805)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(666760960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(521502464))
		getMenuPolicy: 	a RubEditingArea(304834304)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(238424320) named: Pl...etc...
		lastStepTime: 	5969640
		lastStepMessage: 	nil
		lastCycleTime: 	5969667
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(666760960)))
		lastAlarmTime: 	5969640
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:18:27.640668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:18:33.058668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:19:10.567668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:19:14.723668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 9
26 January 2021 11:20:38.405668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

ByteString(Object)>>at:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

ByteString>>at:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 9
26 January 2021 11:20:51.976668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

ByteString(Object)>>at:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

ByteString>>at:
	Receiver: '11C'
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
'11C'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'11C'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (803@2843)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announceTHERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
26 January 2021 11:23:12.318668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 1
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
1

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

SmallInteger(Object)>>size
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluatTHERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
26 January 2021 11:23:50.767668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 1
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
1

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

SmallInteger(Object)>>size
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (596@2900)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(666760960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(352192256))
		getMenuPolicy: 	a RubEditingArea(304834304)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(238424320) named: Pl...etc...
		lastStepTime: 	6346160
		lastStepMessage: 	nil
		lastCycleTime: 	6346195
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(666760960)))
		lastAlarmTime: 	6346160
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:24:10.775668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:25:41.858668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:26:28.951668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (coTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:27:21.022668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	ReceTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:27:24.839668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
26 January 2021 11:27:59.328668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

Array(ArrayedCollection)>>add:
	Receiver: #()
	Arguments and temporary variables: 
		newObject: 	$
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	$C
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (596@2919)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:28:39.827668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:28:40.400668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ count := count + 1.
cardNums size == i & (count >= 5)
	if...etc...
		propeTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
26 January 2021 11:29:02.691668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

Array(ArrayedCollection)>>add:
	Receiver: #()
	Arguments and temporary variables: 
		newObject: 	$
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	$C
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (596@2919)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(666760960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(652349696))
		getMenuPolicy: 	a RubEditingArea(304834304)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(238424320) named: Pl...etc...
		lastStepTime: 	6658051
		lastStepMessage: 	nil
		lastCycleTime: 	6658119
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:31:35.419668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variablesTHERE_BE_DRAGONS_HERE
Instance of Array did not understand #addFirst:
26 January 2021 11:31:38.147668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #addFirst:
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	addFirst: $C
		exception: 	MessageNotUnderstood: Array>> #addFirst:
		resumeValue: 	ni
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 9 13 10 8 7 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	$C
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '9C' '13C' '10C' '8C' '7C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(6 7 8 9 10 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	13
		current: 	13
		sorted: 	a SortedCollection(6 7 8 9 10 11 12 13)
		sorted2: 	a Set('9' '11' '7' '12' '8' '10' '13' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11C' '12C' '13C' '13C')
		twoDigits: 	a SortedCollection('6C' '7C' '8C' '9C')
		nice: 	nil
		clubs: 	#()
		diamonds: 	#()
		hearts: 	#()
		spades: 	#()
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(304834304)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(304834304)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (596@2900)
		owner: 	a TransformWithLayoutMorph(530594048)
		submorphs: 	an Array(a RubCursor(666760960) a RubPrimarySelectionMorph(179230464...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (759689472) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(914360576)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(666760960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(104916224))
		getMenuPolicy: 	a RubEditingArea(304834304)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(267904768)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorpTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:34:12.378668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2737
		right: 	2754
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2729)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:36:22.323668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2743
		right: 	2760
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2735)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 11:36:26.479668 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2743
		right: 	2760
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2735)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNodeTHERE_BE_DRAGONS_HERE
RPackageConflictError: A package named CPS506 already exists
26 January 2021 12:25:17.529668 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RPackageOrganizer>>signalPackageExists:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		aPackageName: 	'CPS506
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 9085)
		packages: 	an IdentityDictionary(size 685)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 982)
		debuggingName: 	''


RPackageOrganizer>>validatePackageDoesNotExist:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		aPackageName: 	'CPS506
	Receiver's insTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 12:44:17.233668 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2745
		right: 	2762
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2737)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNTHERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)\Pharo 8.0 - 64bit (stable).changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
26 January 2021 2:50:38.101796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Administrator\Docu...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Administrator\Documents\Pharo\images\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	fals
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Administrator\Documents\Pharo\images\Pharo 8.0 - 64bi...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-01-26T14:50:37.809796-05:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
26 January 2021 3:00:55.422668 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpListPresenter(Object)>>deprecated:on:in:
	Receiver: a SpListPresenter
	Arguments and temporary variables: 
		anExplanationString: 	'Use #contextMenu: instead. The old way to create a MenuPr...etc...
		date: 	'2019-03-07'
		version: 	#Pharo
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	an EyeInspector
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	a KMCategory
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpVTHERE_BE_DRAGONS_HERE
ZeroDivide
26 January 2021 4:03:58.492668 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger>>/
	Receiver: 2
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ZeroDivide
26 January 2021 4:04:07.282668 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger>>/
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	
	Receiver's instance variables: 
2

PharoSyntaxTutorial>>divideTwoByZero
	Receiver: a Pharo Tutorial (Pharo Syntax Tutorial)
	Arguments and temporary variables: 

	Receiver's instance variables: 
a Pharo Tutorial (Pharo Syntax Tutorial)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoSyntaxTutorial new divideTwoByZero
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(941932288)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(941932288)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(941932288)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(941932288)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(941932288)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy
		completionEngine: 	a CompletionEngine


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(941932288
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(size 103)
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ClyTextEditor}
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary(#CompletionEngineClass->CompletionEngine )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lab is missing, and does not understand #getElem:
26 January 2021 7:46:22.678796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject>>doesNotUnderstand: #getElem:
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lab is missing, and does not understand #getElem:
26 January 2021 7:47:43.884796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject>>doesNotUnderstand: #getElem:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	getElem: 25
		exception: 	VariableNotDeclared: receiver of "getElem:" is nil
		resumeValue: 	nil
		node: 	RBVariableNode(lab
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript
		clear;
		show: (lab getElem: 25);
		cr
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(693768448)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEdTHERE_BE_DRAGONS_HERE
#lab is missing, and does not understand #getElem:
26 January 2021 7:48:04.587796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject>>doesNotUnderstand: #getElem:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	getElem: 25
		exception: 	VariableNotDeclared: receiver of "getElem:" is nil
		resumeValue: 	nil
		node: 	RBVariableNode(lab
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript
		clear;
		show: (lab getElem: 25);
		cr
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(693768448)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(693768448)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1051323648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(693768448)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (766@183)
		owner: 	a TransformWithLayoutMorph(406527744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(558800640) a RubCursor(392859904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (390016768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(780309248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(392859904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(894415104))
		getMenuPolicy: 	a RubEditingArea(693768448)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1051323648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lab is missing, and does not understand #getElem:
26 January 2021 8:17:57.388796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject>>doesNotUnderstand: #getElem:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	getElem: -7
		exception: 	VariableNotDeclared: receiver of "getElem:" is nil
		resumeValue: 	nil
		node: 	RBVariableNode(lab
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript
		clear;
		show: (lab getElem: -7);
		cr
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(693768448)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(693768448)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1051323648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(693768448)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (378@221)
		owner: 	a TransformWithLayoutMorph(406527744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(404945152) a RubCursor(392859904...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (390016768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(780309248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(392859904)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(876090624))
		getMenuPolicy: 	a RubEditingArea(693768448)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1051323648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(700027648))(a FadingMorp...etc...
		lastStepTime: 	19639646
		lastStepMessage: 	nil
		lastCycleTime: 	19639683
		alarms: 	a Heap()
		lastAlarmTime: 	19639646
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
26 January 2021 10:20:25.783796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #('5D' '6D' '1C' '9H' '12S' '11C' '10H' '4S' '7S')
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 10:21:26.835796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	ArTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 10:21:33.348796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2801
		right: 	2818
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypinTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 10:21:33.889796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2801
		right: 	2818
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2793)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straigTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 10:21:38.727796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2801
		right: 	2818
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2793)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
26 January 2021 10:23:18.926796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 1
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
1

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

SmallInteger(Object)>>size
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: '7'
	Arguments and temporary variables: 
		start: 	2
		stop: 	1
		replacementCollection: 	1
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
'7'

ByteString(SequenceableCollection)>>,
	Receiver: '7'
	Arguments and temporary variables: 
		otherCollection: 	
	Receiver's instance variables: 
'7'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
26 January 2021 10:24:42.709796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2750
		right: 	2767
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2742)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
26 January 2021 10:26:07.520796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #('5C' '4D' '3D' '5H' '8H' '3C' '9S' '11S' '8D')
	Arguments and temporary variables: 

	Receiver's instance variables: 
#('5C' '4D' '3D' '5H' '8H' '3C' '9S' '11S' '8D')

Array(ArrayedCollection)>>add:
	Receiver: #('5C' '4D' '3D' '5H' '8H' '3C' '9S' '11S' '8D')
	Arguments and temporary variables: 
		newObject: 	'41
	Receiver's instance variables: 
#('5C' '4D' '3D' '5H' '8H' '3C' '9S' '11S' '8D')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
26 January 2021 10:26:26.737796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #('5H' '9D' '2S' '6S' '1H' '5S' '6H' '13D' '12S')
	Arguments and temporary variables: 

	Receiver's instance variables: 
#('5H' '9D' '2S' '6S' '1H' '5S' '6H' '13D' '12S')

Array(ArrayedCollection)>>add:
	Receiver: #('5H' '9D' '2S' '6S' '1H' '5S' '6H' '13D' '12S')
	Arguments and temporary variables: 
		newObject: 	'91
	Receiver's instance variables: 
#('5H' '9D' '2S' '6S' '1H' '5S' '6H' '13D' '12S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(31 22 41 45 27 44 32 26 51)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	$D
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12S'
		val: 	51
		newShuf: 	#('5H' '9D' '2S' '6S' '1H' '5S' '6H' '13D' '12S')
		card: 	'9D'
		tempCard: 	nil
		cardNums: 	#(1 2 5 6 9 12 13)
		cardSuits: 	#($D $D $S $S $S $S $H $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	an OrderedCollection()
		count: 	1
		previous: 	$5
		current: 	13
		sorted: 	a SortedCollection(1 2 5 6 9 12 13)
		sorted2: 	a Set('9' '1' '2' '5' '12' '13' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('12S' '13D')
		twoDigits: 	a SortedCollection('1H' '2S' '5H' '5S' '6H' '6S' '9D')
		nice: 	#('1H' '2S' '5H' '5S' '6H' '6S' '9D' '12S' '13D')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection('9D' '13D')
		hearts: 	an OrderedCollection('1H' '5H' '6H')
		spades: 	an OrderedCollection('2S' '5S' '6S' '12S')
		count2: 	1
		previous2: 	'5H'
		temp2: 	'9'
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(452153088)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Character did not understand #,
26 January 2021 10:27:01.859796 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: $S
	Arguments and temporary variables: 
		aMessage: 	, '1'
		exception: 	MessageNotUnderstood: Character>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
$S

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(30 51 2 24 42 39 23 22 14)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	$S
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'1D'
		val: 	14
		newShuf: 	#('4H' '12S' '2C' '11D' '3S' '13H' '10D' '9D' '1D')
		card: 	'12S'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 9 10 11 12 13)
		cardSuits: 	#($C $D $D $D $D $S $S $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	an OrderedCollection('121')
		count: 	1
		previous: 	$4
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 9 10 11 12 13)
		sorted2: 	a Set('9' '4' '11' '2' '12' '3' '10' '13' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10D' '11D' '12S' '13H')
		twoDigits: 	a SortedCollection('1D' '2C' '3S' '4H' '9D')
		nice: 	#('1D' '2C' '3S' '4H' '9D' '10D' '11D' '12S' '13H')
		clubs: 	an OrderedCollection('2C')
		diamonds: 	an OrderedCollection('1D' '9D' '10D' '11D')
		hearts: 	an OrderedCollection('4H' '13H')
		spades: 	an OrderedCollection('3S' '12S')
		count2: 	1
		previous2: 	'4'
		temp2: 	'12'
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(452153088)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStratTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 9:57:48.109866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 9:57:48.771866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2800
		right: 	2817
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:00:51.799866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2800
		right: 	2817
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArraTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:12:40.098866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1502->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		THERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:13:30.506866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1502->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(14 46 23 48 24 24 7 31 15)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'11'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'2D'
		val: 	15
		newShuf: 	#('1D' '7S' '10D' '9S' '11D' '11D' '7C' '5H' '2D')
		card: 	'11D'
		tempCard: 	nil
		cardNums: 	#(1 2 5 7 9 10 11)
		cardSuits: 	#($C $D $D $D $D $D $S $S $H)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set(5 1 2)
		count: 	1
		previous: 	'10'
		current: 	11
		sorted: 	a SortedCollection(1 2 5 7 9 10 11)
		sorted2: 	a Set('9' '11' '7' '2' '5' '10' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10D' '11D' '11D')
		twoDigits: 	a SortedCollection('1D' '2D' '5H' '7C' '7S' '9S')
		nice: 	#('1D' '2D' '5H' '7C' '7S' '9S' '10D' '11D' '11D')
		clubs: 	an OrderedCollection('7C')
		diamonds: 	an OrderedCollection('1D' '2D' '10D' '11D' '11D')
		hearts: 	an OrderedCollection('5H')
		spades: 	an OrderedCollection('7S' '9S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->1 'D'->5 'H'->1 'S'->2 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->0 4->0 5->1 6->0 7->2 8->0 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilatTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:13:52.845866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1502->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(18 19 1 35 51 11 36 43 46)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'12'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7S'
		val: 	46
		newShuf: 	#('5D' '6D' '1C' '9H' '12S' '11C' '10H' '4S' '7S')
		card: 	'12S'
		tempCard: 	nil
		cardNums: 	#(1 4 5 6 7 9 10 11 12)
		cardSuits: 	#($C $C $D $D $S $S $S $H $H)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(2 3)
		count: 	1
		previous: 	'11'
		current: 	12
		sorted: 	a SortedCollection(1 4 5 6 7 9 10 11 12)
		sorted2: 	a Set('9' '11' '4' '7' '5' '12' '10' '6' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10H' '11C' '12S')
		twoDigits: 	a SortedCollection('1C' '4S' '5D' '6D' '7S' '9H')
		nice: 	#('1C' '4S' '5D' '6D' '7S' '9H' '10H' '11C' '12S')
		clubs: 	an OrderedCollection('1C' '11C')
		diamonds: 	an OrderedCollection('5D' '6D')
		hearts: 	an OrderedCollection('9H' '10H')
		spades: 	an OrderedCollection('4S' '7S' '12S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->2 'H'->2 'S'->3 )
		valuesInHand: 	a Dictionary(1->1 2->0 3->0 4->1 5->1 6->1 7->1 8->0 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:15:17.954866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1502->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(14 33 28 16 43 34 34 15 22)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'9'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'9D'
		val: 	22
		newShuf: 	#('1D' '7H' '2H' '3D' '4S' '8H' '8H' '2D' '9D')
		card: 	'8H'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 7 8 9)
		cardSuits: 	#($D $D $D $D $S $H $H $H $H)
		valueStreaks: 	a Set(1 2)
		suitStreaks: 	a Set(1 4)
		count: 	1
		previous: 	'8'
		current: 	9
		sorted: 	a SortedCollection(1 2 3 4 7 8 9)
		sorted2: 	a Set('9' '4' '7' '2' '8' '3' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection()
		twoDigits: 	a SortedCollection('1D' '2D' '2H' '3D' '4S' '7H' '8H' '8H' '9D')
		nice: 	#('1D' '2D' '2H' '3D' '4S' '7H' '8H' '8H' '9D')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection('1D' '2D' '3D' '9D')
		hearts: 	an OrderedCollection('2H' '7H' '8H' '8H')
		spades: 	an OrderedCollection('4S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->0 'D'->4 'H'->4 'S'->1 )
		valuesInHand: 	a Dictionary(1->1 2->2 3->1 4->1 5->0 6->0 7->1 8->2 9->1 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: rTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:17:10.907866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1520->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:20:35.291866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1520->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	THERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:20:45.953866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: (arg1 tempNamed: 'streaks') ifFalse: (arg1 tempNamed: 'streak...etc...
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1520->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(441545472)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617728768)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:24:31.304866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: tmp2 ifFalse: 'i'
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1537->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:25:31.990866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: tmp2 ifFalse: 'i'
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1537->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	13
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	THERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:26:51.984866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: tmp2 ifFalse: 'i'
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1532->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'2C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'1C'
		current: 	'2'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(441545472)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617728768)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (605@3603)
		owner: 	a TransformWithLayoutMorph(160396544)
		submorphs: 	an Array(a RubCursor(119914240) a RubPrimarySelectionMorph(145981184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (769280768) [other:  (announcer -> an Announcer) (k...etc...
		mTHERE_BE_DRAGONS_HERE
Instance of True class did not understand #ifTrue:ifFalse:
28 January 2021 10:27:45.315866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: True
	Arguments and temporary variables: 
		aMessage: 	ifTrue: tmp2 ifFalse: 'i'
		exception: 	MessageNotUnderstood: True class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

True class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: True
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1532->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


True class(ProtoObject)>>mustBeBoolean
	Receiver: True
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->True>>#& #and:->True>>#and: #asAlien->True>>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#True
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'2C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'1C'
		current: 	'2'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection()
		hand: 	nil
		found: 	nil
		notFound: 	True
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(441545472)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617728768)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (605@3603)
		owner: 	a TransformWithLayoutMorph(160396544)
		submorphs: 	an Array(a RubCursor(119914240) a RubPrimarySelectionMorph(145981184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (769280768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(917054208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(119914240)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(417816320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:28:12.155866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
Instance of False class did not understand #ifTrue:ifFalse:
28 January 2021 10:28:15.399866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False class(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: False
	Arguments and temporary variables: 
		aMessage: 	ifTrue: tmp2 ifFalse: 'i'
		exception: 	MessageNotUnderstood: False class>> #ifTrue:ifFalse:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->False>>#& #and:->False>>#and: #asAlien->Fals...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#False
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoItIn:
	Receiver: nil
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>DoI
	Receiver's instance variables: 
nil

False class(ProtoObject)>>mustBeBooleanDeOptimizeIn:
	Receiver: False
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		ret: 	nil
		cache: 	an IdentityDictionary(1531->UndefinedObject>>#DoItIn: )
		method: 	UndefinedObject>>#DoItIn
	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->False>>#& #and:->False>>#and: #asAlien->Fals...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#False
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


False class(ProtoObject)>>mustBeBoolean
	Receiver: False
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Boolean
		methodDict: 	a MethodDictionary(#&->False>>#& #and:->False>>#and: #asAlien->Fals...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#False
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'12C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'11'
		current: 	'12'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection('2C' '3C' '4C' '5C' '6C')
		hand: 	nil
		found: 	nil
		notFound: 	False
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617728768)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(441545472)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617728768)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (605@3603)
		owner: 	a TransformWithLayoutMorph(160396544)
		submorphs: 	an Array(a RubCursor(119914240) a RubPrimarySelectionMorph(145981184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (769280768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(917054208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(119914240)
		segments: 	an OrderedCollection(THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:25.540866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:26.064866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ sTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:32.004866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitorTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:43.378866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:43.924866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:49.809866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:29:54.325866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 0 arguments, but was called with 1 argument.
28 January 2021 10:37:40.543866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ Transcript
	show: streaks;
	cr ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1617
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ Transcript
	show: streaks;
	cr ]
	Arguments and temporary variables: 
		anArg: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1617
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	5
		aBlock: 	[ Transcript
	show: streaks;
	cr ]
		nextValue: 	
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'12C'
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	an OrderedCollection('2C' '3C' '4C' '5C' '6C')
		hand: 	nil
		found: 	nil
		notFound: 	Fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	ReceTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
28 January 2021 10:38:39.883866 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#counTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 9:51:04.685405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:06:48.404405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:07:16.594405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:08:09.725405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:09:00.691405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:10:11.284405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:12:36.454405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:13:21.084405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (600@3774)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:14:03.886405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	tru
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (600@3774)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editorTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:14:40.551405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C' '13C' '13C' '13C' '13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@3793)
		owner: 	a TransformWithLayoutMorph(5THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:15:16.876405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('13C' '13C' '13C' '13C' '13C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@3774)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:16:17.340405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('2' '3' '4' '5' '6')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@3774)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(483341056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(224624384)
		segments: 	an OrderedCollection(a RubHighlightSeTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:16:39.378405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:16:58.780405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('2C' '3C' '4C' '5C' '6C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@3774)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(483341056)
		editingState: 	a RubEditingState
		textSTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
29 January 2021 10:17:13.667405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('2C' '3C' '4C' '5C' '6C')
		suitStreaks: 	a Set()
		count: 	7
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->1 2->1 3->1 4->1 5->1 6->1 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	fals
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@3755)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(675410176) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(483341056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right:THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 10:20:18.608405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'1C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(Object)>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	ni
	Receiver's instance variables: 
'1C'

ByteString>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	ni
	Receiver's instance variables: 
'1C'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(11 1 2 3 4 5 13 6 12)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	an OrderedCollection()
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection('6C' '5C' '4C' '3C' '2C')
		val: 	12
		newShuf: 	#('11C' '1C' '2C' '3C' '4C' '5C' '13C' '6C' '12C')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 5 6 11 12 13)
		cardSuits: 	#($C $C $C $C $C $C $C $C $C)
		valueStreaks: 	an OrderedCollection('2C' '3C' '4C' '5C' '6C')
		suitStreaks: 	an OrderedCollection()
		count: 	7
		previous: 	'1C'
		current: 	'13'
		sorted: 	a SortedCollection(1 2 3 4 5 6 11 12 13)
		sorted2: 	a Set('1' '11' '4' '2' '5' '12' '3' '6' '13')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '12C' '13C')
		twoDigits: 	a SortedCollection('1C' '2C' '3C' '4C' '5C' '6C')
		nice: 	#('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		clubs: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C' '6C' '11C' '12C' '13C')
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'-THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:25:41.137405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2808
		right: 	2825
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2800)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	ReceiveTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:32:49.953405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2810
		right: 	2827
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2802)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
29 January 2021 10:36:10.004405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $2
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$2

Character(Object)>>errorNotIndexable
	Receiver: $2
	Arguments and temporary variables: 

	Receiver's instance variables: 
$2

Character(Object)>>size
	Receiver: $2
	Arguments and temporary variables: 

	Receiver's instance variables: 
$2

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(12 36 50 14 14 27 12 24 24)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	an OrderedCollection()
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	24
		newShuf: 	#('12C' '10H' '11S' '1D' '1D' '1H' '12C' '11D' '11D')
		card: 	'1D'
		tempCard: 	nil
		cardNums: 	#(1 10 11 12)
		cardSuits: 	#($C $C $D $D $D $D $S $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	an OrderedCollection()
		count: 	1
		previous: 	$2
		current: 	$D
		sorted: 	a SortedCollection(1 10 11 12)
		sorted2: 	a Set('11' '12' '10' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10H' '11D' '11D' '11S' '12C' '12C')
		twoDigits: 	a SortedCollection('1D' '1D' '1H')
		nice: 	#('1D' '1D' '1H' '10H' '11D' '11D' '11S' '12C' '12C')
		clubs: 	an OrderedCollection('12C' '12C')
		diamonds: 	an OrderedCollection('1D' '1D' '11D' '11D')
		hearts: 	an OrderedCollection('1H' '10H')
		spades: 	an OrderedCollection('11S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->2 'D'->4 'H'->2 'S'->1 )
		valuesInHand: 	a Dictionary(1->3 2->0 3->0 4->0 5->0 6->0 7->0 8->0 9->0 10->1 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'1D'
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@4173)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
29 January 2021 10:38:16.023405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $7
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$7

Character(Object)>>errorNotIndexable
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

Character(Object)>>size
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(1 6 18 33 20 37 45 3 27)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	an OrderedCollection()
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	27
		newShuf: 	#('1C' '6C' '5D' '7H' '7D' '11H' '6S' '3C' '1H')
		card: 	'1H'
		tempCard: 	nil
		cardNums: 	#(1 3 5 6 7 11)
		cardSuits: 	#($C $C $C $D $D $S $H $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	an OrderedCollection()
		count: 	1
		previous: 	$7
		current: 	$H
		sorted: 	a SortedCollection(1 3 5 6 7 11)
		sorted2: 	a Set('11' '7' '5' '3' '6' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('11H')
		twoDigits: 	a SortedCollection('1C' '1H' '3C' '5D' '6C' '6S' '7D' '7H')
		nice: 	#('1C' '1H' '3C' '5D' '6C' '6S' '7D' '7H' '11H')
		clubs: 	an OrderedCollection('1C' '3C' '6C')
		diamonds: 	an OrderedCollection('5D' '7D')
		hearts: 	an OrderedCollection('1H' '7H' '11H')
		spades: 	an OrderedCollection('6S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$H
		suitsInHand: 	a Dictionary('C'->3 'D'->2 'H'->3 'S'->1 )
		valuesInHand: 	a Dictionary(1->2 2->0 3->1 4->0 5->1 6->2 7->2 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'1H'
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@4192)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(666169600) a RubCursor(224624384...etc...
		fullBounds: 	nilTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:38:28.012405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2815)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
29 January 2021 10:38:30.746405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $0
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$0

Character(Object)>>errorNotIndexable
	Receiver: $0
	Arguments and temporary variables: 

	Receiver's instance variables: 
$0

Character(Object)>>size
	Receiver: $0
	Arguments and temporary variables: 

	Receiver's instance variables: 
$0

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(16 29 32 10 30 45 5 49 47)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	an OrderedCollection()
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	47
		newShuf: 	#('3D' '3H' '6H' '10C' '4H' '6S' '5C' '10S' '8S')
		card: 	'3H'
		tempCard: 	nil
		cardNums: 	#(3 4 5 6 8 10)
		cardSuits: 	#($C $C $D $S $S $S $H $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	an OrderedCollection()
		count: 	1
		previous: 	$0
		current: 	$H
		sorted: 	a SortedCollection(3 4 5 6 8 10)
		sorted2: 	a Set('4' '5' '8' '3' '10' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '10S')
		twoDigits: 	a SortedCollection('3D' '3H' '4H' '5C' '6H' '6S' '8S')
		nice: 	#('3D' '3H' '4H' '5C' '6H' '6S' '8S' '10C' '10S')
		clubs: 	an OrderedCollection('5C' '10C')
		diamonds: 	an OrderedCollection('3D')
		hearts: 	an OrderedCollection('3H' '4H' '6H')
		spades: 	an OrderedCollection('6S' '8S' '10S')
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->1 'H'->3 'S'->3 )
		valuesInHand: 	a Dictionary(1->0 2->0 3->2 4->1 5->1 6->2 7->0 8->1 9->0 10->2 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'3H'
		i: 	
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(949004544)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657842944)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949004544)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (573@4211)
		owner: 	a TransformWithLayoutMorph(559930624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(666169600) a RubCursor(224624384...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (83294464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(483341056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:44:15.684405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False classTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:44:16.219405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2815)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:44:20.588405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2815)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:53:00.331405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2815)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(counTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
29 January 2021 10:53:05.381405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#straight->True class. #count->SmallInteger. nil. #suits->Array. #values->Array}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #straight->True class #suits->Array #values->Array )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{#straight->True class. #count->SmallInteger. nil. #suits->Array. #value...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #straight->True class #suits->Array...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2823
		right: 	2840
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2815)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #straight->False class #su...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 10:53:54.395405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'1C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(Object)>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

ByteString>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(28 36 30 52 15 30 48 16 1)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	1
		newShuf: 	#('2H' '10H' '4H' '13S' '2D' '4H' '9S' '3D' '1C')
		card: 	'13S'
		tempCard: 	nil
		cardNums: 	#(1 2 3 4 9 10 13)
		cardSuits: 	#($C $D $D $S $S $H $H $H $H)
		valueStreaks: 	an OrderedCollection()THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:03:05.965405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '5S'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'5S'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '5S'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'5S'

ByteString(Object)>>at:
	Receiver: '5S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'5S'

ByteString>>at:
	Receiver: '5S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'5S'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:03:20.421405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '3S'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'3S'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '3S'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'3S'

ByteString(Object)>>at:
	Receiver: '3S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'3S'

ByteString>>at:
	Receiver: '3S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'3S'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(19 4 10 4 18 47 24 42 44)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'11'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	44
		newShuf: 	#('6D' '4C' '10C' '4C' '5D' '8S' '11D' '3S' '5S')
		card: 	'11D'
		tempCard: 	nil
		cardNums: 	#(3 4 5 6 8 10 11)
		cardSuits: 	#($C $C $C $D $D $D $S $S $S)
		valueStreaks: 	an OrderedCollection('11D')
		suitStreaks: 	a Set(3)
		count: 	1
		previous: 	'10'
		current: 	'11'
		sorted: 	a SortedCollection(3 4 5 6 8 10 11)
		sorted2: 	a Set('4' '11' '5' '8' '10' '3' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '11D')
		twoDigits: 	a SortedCollection('3S' '4C' '4C' '5D' '5S' '6D' '8S')
		nice: 	#('3S' '4C' '4C' '5D' '5S' '6D' '8S' '10C' '11D')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->3 'D'->3 'H'->0 'S'->3 )
		valuesInHand: 	a Dictionary(1->0 2->0 3->1 4->2 5->2 6->1 7->0 8->1 9->0 10->1 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'3S
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('3S' '4C' '4C' '5D' '5S' '6D' '8S' '10C' '11D')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == $C ]
		stream: 	a WriteStream
		each: 	'3S'
		index: 	
	Receiver's instance variables: 
#('3S' '4C' '4C' '5D' '5S' '6D' '8S' '10C' '11D')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:03:34.766405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '2C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'2C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '2C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'2C'

ByteString(Object)>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

ByteString>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(36 47 45 32 32 28 3 15 2)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	2
		newShuf: 	#('10H' '8S' '6S' '6H' '6H' '2H' '3C' '2D' '2C')
		card: 	'10H'
		tempCard: 	nil
		cardNums: 	#(2 3 6 8 10)
		cardSuits: 	#($C $C $D $S $S $H $H $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(1 2)
		count: 	1
		previous: 	'8'
		current: 	'10'
		sorted: 	a SortedCollection(2 3 6 8 10)
		sorted2: 	a Set('2' '8' '10' '3' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10H')
		twoDigits: 	a SortedCollection('2C' '2D' '2H' '3C' '6H' '6H' '6S' '8S')
		nice: 	#('2C' '2D' '2H' '3C' '6H' '6H' '6S' '8S' '10H')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$H
		suitsInHand: 	a Dictionary('C'->2 'D'->1 'H'->4 'S'->2 )
		valuesInHand: 	a Dictionary(1->0 2->3 3->1 4->0 5->0 6->3 7->0 8->1 9->0 10->1 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'2C
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('2C' '2D' '2H' '3C' '6H' '6H' '6S' '8S' '10H')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == $C ]
		stream: 	a WriteStream
		each: 	'2C'
		index: 	
	Receiver's instance variables: 
#('2C' '2D' '2H' '3C' '6H' '6H' '6S' '8S' '10H')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('2C' '2D' '2H' '3C' '6H' '6H' '6S' '8S' '10H')
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:03:59.113405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'1C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(Object)>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

ByteString>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(1 18 52 22 5 46 26 20 46)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	46
		newShuf: 	#('1C' '5D' '13S' '9D' '5C' '7S' '13D' '7D' '7S')
		card: 	'13S'
		tempCard: 	nil
		cardNums: 	#(1 5 7 9 13)
		cardSuits: 	#($C $C $D $D $D $D $S $S $S)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(2 4)
		count: 	1
		previous: 	'13'
		current: 	'13'
		sorted: 	a SortedCollection(1 5 7 9 13)
		sorted2: 	a Set('9' '7' '5' '13' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('13D' '13S')
		twoDigits: 	a SortedCollection('1C' '5C' '5D' '7D' '7S' '7S' '9D')
		nice: 	#('1C' '5C' '5D' '7D' '7S' '7S' '9D' '13D' '13S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->4 'H'->0 'S'->3 )
		valuesInHand: 	a Dictionary(1->1 2->0 3->0 4->0 5->2 6->0 7->3 8->0 9->1 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'1C
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('1C' '5C' '5D' '7D' '7S' '7S' '9D' '13D' '13S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == $C ]
		stream: 	a WriteStream
		each: 	'1C'
		index: 	
	Receiver's instance variables: 
#('1C' '5C' '5D' '7D' '7S' '7S' '9D' '13D' '13S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('1C' '5C' '5D' '7D' '7S' '7S' '9D' '13D' '13S')
	Arguments and temporary variables: 
		each: 	'1C'
		aBlock: 	[ :a | a at: a size == $C 
	Receiver's instance variables: 
#('1C' '5C' '5D' '7D' '7S' '7S' '9D' '13D' '13S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:04:23.403405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '2S'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'2S'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '2S'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'2S'

ByteString(Object)>>at:
	Receiver: '2S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2S'

ByteString>>at:
	Receiver: '2S'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2S'

[ :a | a at: a size == 'C' ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(13 19 10 47 36 48 41 9 50)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	50
		newShuf: 	#('13C' '6D' '10C' '8S' '10H' '9S' '2S' '9C' '11S')
		card: 	'13C'
		tempCard: 	nil
		cardNums: 	#(2 6 8 9 10 11 13)
		cardSuits: 	#($C $C $C $D $S $S $S $S $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(1 3 4)
		count: 	1
		previous: 	'11'
		current: 	'13'
		sorted: 	a SortedCollection(2 6 8 9 10 11 13)
		sorted2: 	a Set('9' '11' '2' '8' '10' '13' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10C' '10H' '11S' '13C')
		twoDigits: 	a SortedCollection('2S' '6D' '8S' '9C' '9S')
		nice: 	#('2S' '6D' '8S' '9C' '9S' '10C' '10H' '11S' '13C')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$C
		suitsInHand: 	a Dictionary('C'->3 'D'->1 'H'->1 'S'->4 )
		valuesInHand: 	a Dictionary(1->0 2->1 3->0 4->0 5->0 6->1 7->0 8->1 9->2 10->2 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'2S
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('2S' '6D' '8S' '9C' '9S' '10C' '10H' '11S' '13C')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == 'C' ]
		stream: 	a WriteStream
		each: 	'2S'
		index: 	
	Receiver's instance variables: 
#('2S' '6D' '8S' '9C' '9S' '10C' '10H' '11S' '13C')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('2S' '6D' '8S' '9C' '9S' '10C' '10H' '11S' '13C')
	Arguments and temporary variables: 
		each: 	'2S'
		aBlock: 	[ :a | a at: a size == 'C' 
	Receiver's instance variables: 
#('2S' '6D' '8S' '9C' '9S' '10C' '10H' '11S' '13C')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:04:39.930405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '2C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'2C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '2C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'2C'

ByteString(Object)>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

ByteString>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

[ :a | a at: a size == 'C' ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(8 29 16 9 30 46 52 11 2)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	2
		newShuf: 	#('8C' '3H' '3D' '9C' '4H' '7S' '13S' '11C' '2C')
		card: 	'13S'
		tempCard: 	nil
		cardNums: 	#(2 3 4 7 8 9 11 13)
		cardSuits: 	#($C $C $C $C $D $S $S $H $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(1 2 4)
		count: 	1
		previous: 	'11'
		current: 	'13'
		sorted: 	a SortedCollection(2 3 4 7 8 9 11 13)
		sorted2: 	a Set('9' '4' '11' '7' '2' '8' '3' '13')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('11C' '13S')
		twoDigits: 	a SortedCollection('2C' '3D' '3H' '4H' '7S' '8C' '9C')
		nice: 	#('2C' '3D' '3H' '4H' '7S' '8C' '9C' '11C' '13S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->4 'D'->1 'H'->2 'S'->2 )
		valuesInHand: 	a Dictionary(1->0 2->1 3->2 4->1 5->0 6->0 7->1 8->1 9->1 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'2C
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('2C' '3D' '3H' '4H' '7S' '8C' '9C' '11C' '13S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == 'C' ]
		stream: 	a WriteStream
		each: 	'2C'
		index: 	
	Receiver's instance variables: 
#('2C' '3D' '3H' '4H' '7S' '8C' '9C' '11C' '13S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('2C' '3D' '3H' '4H' '7S' '8C' '9C' '11C' '13S')
	Arguments and temporary variables: 
		each: 	'2C'
		aBlock: 	[ :a | a at: a size == 'C' 
	Receiver's instance variables: 
#('2C' '3D' '3H' '4H' '7S' '8C' '9C' '11C' '13S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:05:20.522405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1D'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'1D'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1D'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1D'

ByteString(Object)>>at:
	Receiver: '1D'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1D'

ByteString>>at:
	Receiver: '1D'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1D'

[ :a | a at: a size == 'C' ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(42 27 47 19 19 14 42 20 21)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'8'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	21
		newShuf: 	#('3S' '1H' '8S' '6D' '6D' '1D' '3S' '7D' '8D')
		card: 	'8S'
		tempCard: 	nil
		cardNums: 	#(1 3 6 7 8)
		cardSuits: 	#($D $D $D $D $D $S $S $S $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(5 3)
		count: 	1
		previous: 	'8'
		current: 	'8'
		sorted: 	a SortedCollection(1 3 6 7 8)
		sorted2: 	a Set('7' '8' '3' '6' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection()
		twoDigits: 	a SortedCollection('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')
		nice: 	#('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->0 'D'->5 'H'->1 'S'->3 )
		valuesInHand: 	a Dictionary(1->2 2->0 3->2 4->0 5->0 6->2 7->1 8->2 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'1D
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == 'C' ]
		stream: 	a WriteStream
		each: 	'1D'
		index: 	
	Receiver's instance variables: 
#('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')
	Arguments and temporary variables: 
		each: 	'1D'
		aBlock: 	[ :a | a at: a size == 'C' 
	Receiver's instance variables: 
#('1D' '1H' '3S' '3S' '6D' '6D' '7D' '8D' '8S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:05:32.971405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '2C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'2C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '2C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'2C'

ByteString(Object)>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

ByteString>>at:
	Receiver: '2C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'2C'

[ :a | a at: a size == $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(6 2 43 22 30 41 41 51 45)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'12'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	45
		newShuf: 	#('6C' '2C' '4S' '9D' '4H' '2S' '2S' '12S' '6S')
		card: 	'12S'
		tempCard: 	nil
		cardNums: 	#(2 4 6 9 12)
		cardSuits: 	#($C $C $D $S $S $S $S $S $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(5 1 2)
		count: 	1
		previous: 	'9'
		current: 	'12'
		sorted: 	a SortedCollection(2 4 6 9 12)
		sorted2: 	a Set('9' '4' '2' '12' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('12S')
		twoDigits: 	a SortedCollection('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D')
		nice: 	#('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D' '12S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->1 'H'->1 'S'->5 )
		valuesInHand: 	a Dictionary(1->0 2->3 3->0 4->2 5->0 6->2 7->0 8->0 9->1 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'2C
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D' '12S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size == $C ]
		stream: 	a WriteStream
		each: 	'2C'
		index: 	
	Receiver's instance variables: 
#('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D' '12S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D' '12S')
	Arguments and temporary variables: 
		each: 	'2C'
		aBlock: 	[ :a | a at: a size == $C 
	Receiver's instance variables: 
#('2C' '2S' '2S' '4H' '4S' '6C' '6S' '9D' '12S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:06:47.034405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'1C'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(Object)>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

ByteString>>at:
	Receiver: '1C'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'1C'

[ :a | a at: a size = $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(23 30 35 25 14 1 8 52 42)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'13'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	42
		newShuf: 	#('10D' '4H' '9H' '12D' '1D' '1C' '8C' '13S' '3S')
		card: 	'13S'
		tempCard: 	nil
		cardNums: 	#(1 3 4 8 9 10 12 13)
		cardSuits: 	#($C $C $D $D $D $S $S $H $H)
		valueStreaks: 	an OrderedCollection('13S')
		suitStreaks: 	a Set(2 3)
		count: 	1
		previous: 	'12'
		current: 	'13'
		sorted: 	a SortedCollection(1 3 4 8 9 10 12 13)
		sorted2: 	a Set('9' '4' '12' '8' '10' '3' '13' '1')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('10D' '12D' '13S')
		twoDigits: 	a SortedCollection('1C' '1D' '3S' '4H' '8C' '9H')
		nice: 	#('1C' '1D' '3S' '4H' '8C' '9H' '10D' '12D' '13S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->3 'H'->2 'S'->2 )
		valuesInHand: 	a Dictionary(1->2 2->0 3->1 4->1 5->0 6->0 7->0 8->1 9->1 10->1 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'1C
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('1C' '1D' '3S' '4H' '8C' '9H' '10D' '12D' '13S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size = $C ]
		stream: 	a WriteStream
		each: 	'1C'
		index: 	
	Receiver's instance variables: 
#('1C' '1D' '3S' '4H' '8C' '9H' '10D' '12D' '13S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('1C' '1D' '3S' '4H' '8C' '9H' '10D' '12D' '13S')
	Arguments and temporary variables: 
		each: 	'1C'
		aBlock: 	[ :a | a at: a size = $C 
	Receiver's instance variables: 
#('1C' '1D' '3S' '4H' '8C' '9H' '10D' '12D' '13S')

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
29 January 2021 11:07:23.261405 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '3D'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices
	Receiver's instance variables: 
'3D'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '3D'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'3D'

ByteString(Object)>>at:
	Receiver: '3D'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'3D'

ByteString>>at:
	Receiver: '3D'
	Arguments and temporary variables: 
		index: 	fals
	Receiver's instance variables: 
'3D'

[ :a | a at: a size = $C ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(37 5 18 51 18 45 6 51 16)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'12'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	an OrderedCollection()
		val: 	16
		newShuf: 	#('11H' '5C' '5D' '12S' '5D' '6S' '6C' '12S' '3D')
		card: 	'12S'
		tempCard: 	nil
		cardNums: 	#(3 5 6 11 12)
		cardSuits: 	#($C $C $D $D $D $S $S $S $H)
		valueStreaks: 	an OrderedCollection()
		suitStreaks: 	a Set(2 3)
		count: 	1
		previous: 	'12'
		current: 	'12'
		sorted: 	a SortedCollection(3 5 6 11 12)
		sorted2: 	a Set('11' '5' '12' '3' '6')
		straight: 	False
		flush: 	nil
		threeDigits: 	a SortedCollection('11H' '12S' '12S')
		twoDigits: 	a SortedCollection('3D' '5C' '5D' '5D' '6C' '6S')
		nice: 	#('3D' '5C' '5D' '5D' '6C' '6S' '11H' '12S' '12S')
		clubs: 	an OrderedCollection()
		diamonds: 	an OrderedCollection()
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$S
		suitsInHand: 	a Dictionary('C'->2 'D'->3 'H'->1 'S'->3 )
		valuesInHand: 	a Dictionary(1->0 2->0 3->1 4->0 5->3 6->2 7->0 8->0 9->0 10->0 1...etc...
		streaks: 	nil
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	nil
		a: 	'3D
	Receiver's instance variables: 
nil

[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (each := self at: index))
		ifTrue: [ stream nextPut: each ] ] ] in Array(SequenceableCollection)>>select:
	Receiver: #('3D' '5C' '5D' '5D' '6C' '6S' '11H' '12S' '12S')
	Arguments and temporary variables: 
		aBlock: 	[ :a | a at: a size = $C ]
		stream: 	a WriteStream
		each: 	'3D'
		index: 	
	Receiver's instance variables: 
#('3D' '5C' '5D' '5D' '6C' '6S' '11H' '12S' '12S')

Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	9
		blockWithArg: 	[ :stream | 
1 to: self size do: [ :index | 
	(aBlock value: (eac...etc...
		stream: 	a WriteStrea
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array(SequenceableCollection)>>select:
	Receiver: #('3D' '5C' '5D' '5D' '6C' '6S' '11H' '12S' '12S')
	Arguments and temporary variables: 
		each: 	'3D'
		aBlock: 	[ :a | a at: a size = $C 
	Receiver's instance variables: 
#('3D' '5C' '5D' '5D' '6C' '6S' '11H' '12S' '12S')

UndefinedObject>>DoIt
	RTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:13:48.823794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:15:51.424794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:15:51.963794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(537 580)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:16:01.022794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(537 580)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ne...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollectio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ ...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:16:01.552794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(537 580)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ne...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollectio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ ...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ stre...etc...
		periods: 	an OrderedCollection()
		temporaries: 	#()


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variablTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:16:38.391794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(537 580)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ne...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollectio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ ...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ stre...etc...
		periods: 	an OrderedCollection()
		temporaries: 	#()


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc..
	Receiver's instance variaTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:16:38.920794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	589
		right: 	607
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(537 580)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ne...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollectio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ ...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ stre...etc...
		periods: 	an OrderedCollection()
		temporaries: 	#()


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:19:28.800794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: False class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: True class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->False class>>#materializeFrom...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	False


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class )
		name: 	#notFound
		type1: 	True class
		type2: 	False clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#notFound->False clas
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. #notFound->False class. nil}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{nil. nil. nil. #notFound->False class. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


Dictionary>>keysDo:
	Receiver: a Dictionary(#notFound->False class )
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. #notFound->False class. nil}


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ notFound := False ])
		stackTop: 	a Dictionary(#notFound->False class 
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ notFound := False ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	598
		right: 	616
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(notFound := False)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc...
		each: 	RBBlockNode([ notFound := False ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([ notFo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ streaks := OrderedCollection new ]) RBBlockNode([...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedColle...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ n...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(streaks size < 5)
		selector: 	#ifTrue:ifFalse:
		keywordsPositions: 	an IntegerArray(546 589)
		arguments: 	an OrderedCollection(RBBlockNode([ streaks := OrderedCollection new ...etc...


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection n...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		each: 	RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection ne...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollectio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBMessageNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc...
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCol...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#notFound->True class ) a Dictionary(#notFound-...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(streaks size < 5
	ifTrue: [ streaks := OrderedCollection new ]
	ifFalse: [ ...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ streaks size < 5
	ifTrue: [ streaks := OrderedCollection ...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBMessageNode(streaks size < 5
	ifTrue: [ stre...etc...
		periods: 	an OrderedCollection()
		temporarTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:21:55.289794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2811
		right: 	2828
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2803)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ count := count + 1.
cardNums size == i & (count >= 5)
	if...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessage...etc...
		periods: 	an OrderedCollectTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:35:26.998794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2838
		right: 	2855
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2830)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:56:44.161794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2857
		right: 	2874
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2849)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	RecTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:57:10.018794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2858
		right: 	2875
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2850)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc..THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 0 arguments, but was called with 1 argument.
30 January 2021 10:58:01.968794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ Transcript
	show: highestSuitStreak;
	cr ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1768
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ Transcript
	show: highestSuitStreak;
	cr ]
	Arguments and temporary variables: 
		anArg: 	
	Receiver's instance variables: 
		outTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:58:41.491794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2858
		right: 	2875
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2850)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 10:58:45.717794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2858
		right: 	2875
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2850)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 10:59:28.390794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | highestSuitStreak size - 4 to: highestSuitStreak size do: [ highestSuitStreak add: ...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1759
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | highestSuitStreak size - 4 to: highestSuitStreak size do: [ highestSuitStreak add: ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1759
		numArgs: 	1


True>>ifTrue:
	Receiver: true
	Arguments and temporary variables: 
		alternativeBlock: 	[ :i | highestSuitStreak size - 4 to: highestSuitStreak size ...etc..
	Receiver's instance variables: 
true

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 11:02:31.012794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1764
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1764
		numArgs: 	1


True>>ifTrue:
	Receiver: true
	Arguments and temporary variables: 
		alternativeBlock: 	[ :i | suitStreak size - 4 to: suitStreak size do: [ highestS...etc..
	Receiver's instance variables: 
true

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(9 23 15 3 4 5 8 6 7)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7C'
		val: 	7
		newShuf: 	#('9C' '10D' '2D' '3C' '4C' '5C' '8C' '6C' '7C')
		card: 	'10D'
		tempCard: 	nil
		cardNums: 	#(2 3 4 5 6 7 8 9 10)
		cardSuits: 	#($C $C $C $C $C $C $C $D $D)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(7)
		count: 	8
		previous: 	$C
		current: 	$D
		sorted: 	a SortedCollection(2 3 4 5 6 7 8 9 10)
		sorted2: 	a Set('9' '4' '7' '2' '5' '8' '10' '3' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10D')
		twoDigits: 	a SortedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		nice: 	#('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		clubs: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		diamonds: 	an OrderedCollection('2D' '10D')
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 1->0 2->1 3->1 4->1 5->1 ...etc...
		valuesInHand: 	a Dictionary(1->0 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'9C'
		highestStreaks: 	an OrderedCollection('6C' '7C' '8C' '9C' '10D')
		highestSuitStreak: 	an OrderedCollection()
		suitStreak: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C'
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 11:02:39.998794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1764
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1764
		numArgs: 	1


True>>ifTrue:
	Receiver: true
	Arguments and temporary variables: 
		alternativeBlock: 	[ :i | suitStreak size - 4 to: suitStreak size do: [ highestS...etc..
	Receiver's instance variables: 
true

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(9 23 15 3 4 5 8 6 7)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7C'
		val: 	7
		newShuf: 	#('9C' '10D' '2D' '3C' '4C' '5C' '8C' '6C' '7C')
		card: 	'10D'
		tempCard: 	nil
		cardNums: 	#(2 3 4 5 6 7 8 9 10)
		cardSuits: 	#($C $C $C $C $C $C $C $D $D)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(7)
		count: 	8
		previous: 	$C
		current: 	$D
		sorted: 	a SortedCollection(2 3 4 5 6 7 8 9 10)
		sorted2: 	a Set('9' '4' '7' '2' '5' '8' '10' '3' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10D')
		twoDigits: 	a SortedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		nice: 	#('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		clubs: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		diamonds: 	an OrderedCollection('2D' '10D')
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 1->0 2->1 3->1 4->1 5->1 ...etc...
		valuesInHand: 	a Dictionary(1->0 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'9C'
		highestStreaks: 	an OrderedCollection('6C' '7C' '8C' '9C' '10D')
		highestSuitStreak: 	an OrderedCollection()
		suitStreak: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C'
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 11:04:19.077794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1772
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | suitStreak size - 4 to: suitStreak size do: [ highestSuitStreak add: (suitStreak at...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	1772
		numArgs: 	1


True>>ifTrue:
	Receiver: true
	Arguments and temporary variables: 
		alternativeBlock: 	[ :i | suitStreak size - 4 to: suitStreak size do: [ highestS...etc..
	Receiver's instance variables: 
true

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(9 23 15 3 4 5 8 6 7)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7C'
		val: 	7
		newShuf: 	#('9C' '10D' '2D' '3C' '4C' '5C' '8C' '6C' '7C')
		card: 	'10D'
		tempCard: 	nil
		cardNums: 	#(2 3 4 5 6 7 8 9 10)
		cardSuits: 	#($C $C $C $C $C $C $C $D $D)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(7)
		count: 	8
		previous: 	$C
		current: 	$D
		sorted: 	a SortedCollection(2 3 4 5 6 7 8 9 10)
		sorted2: 	a Set('9' '4' '7' '2' '5' '8' '10' '3' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10D')
		twoDigits: 	a SortedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		nice: 	#('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		clubs: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		diamonds: 	an OrderedCollection('2D' '10D')
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 1->0 2->1 3->1 4->1 5->1 ...etc...
		valuesInHand: 	a Dictionary(1->0 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'9C'
		highestStreaks: 	an OrderedCollection('6C' '7C' '8C' '9C' '10D')
		highestSuitStreak: 	an OrderedCollection()
		suitStreak: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C'
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| lista deckwinner shuf here temp values suits output val newShuf ca...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 11:15:12.200794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2869
		right: 	2886
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2861)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #commonSuperclassWith:
30 January 2021 11:15:12.761794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #commonSuperclassWith:
	Receiver: True class
	Arguments and temporary variables: 
		aMessage: 	commonSuperclassWith: False class
		exception: 	MessageNotUnderstood: Metaclass>> #commonSuperclassWith:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Boolean class
		methodDict: 	a MethodDictionary(#materializeFrom:->True class>>#materializeFrom:...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	True


[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top includesKey: name)
	ifFalse: [ typeStack top at: name put: type2 ]
	ifTrue: [ type1 := typeStack top at: name.
		type1 == type2
			ifFalse: [ typeStack top at: name put: (type2 commonSuperclassWith: type1) ] ] ] in TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc...
		name: 	#straight
		type1: 	False class
		type2: 	True clas
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc...
		association: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	#straight->True clas
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Array(SequenceableCollection)>>do:
	Receiver: {#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil. #straight->True ...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key 
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(#count->SmallInteger #lista->Array #straight->True class #suits->Array #value...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :name | 
| type1 type2 |
type2 := stackTop at: name.
(typeStack top i...etc..
	Receiver's instance variables: 
		tally: 	5
		array: 	{#values->Array. #lista->Array. #count->SmallInteger. nil. nil. nil. nil...etc...


TypingVisitor>>visitBlockNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aBlockNode: 	RBBlockNode([ straight := True ])
		stackTop: 	a Dictionary(#count->SmallInteger #lista->Array #straight->True class...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBBlockNode>>acceptVisitor:
	Receiver: RBBlockNode([ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := ...etc...
		properties: 	nil
		parentheses: 	nil
		left: 	2869
		right: 	2886
		colons: 	an OrderedCollection()
		arguments: 	an OrderedCollection()
		bar: 	nil
		body: 	RBSequenceNode(straight := True)
		scope: 	an OCOptimizedBlockScope 7


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc...
		each: 	RBBlockNode([ straight := True ]
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBBlockNode([ straight := True ]))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBBlockNode([ straight := True ]) nil nil)
		firstIndex: 	1
		lastIndex: 	1


TypingVisitor(RBProgramNodeVisitor)>>visitMessageNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straig...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := True ])
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	i...etc...
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBMessageNode(cardNums size == i & (count >= 5))
		selector: 	#ifTrue:
		keywordsPositions: 	an IntegerArray(2861)
		arguments: 	an OrderedCollection(RBBlockNode([ straight := True ]))


TypingVisitor(RBProgramNodeVisitor)>>visitNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := T...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


[ :each | self visitNode: each ] in TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc...
		each: 	RBMessageNode(cardNums size == i & (count >= 5)
	ifTrue: [ straight := Tr...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums size == i...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	
	Receiver's instance variables: 
		array: 	an Array(RBAssignmentNode(count := count + 1) RBMessageNode(cardNums siz...etc...
		firstIndex: 	1
		lastIndex: 	2


TypingVisitor(RBProgramNodeVisitor)>>visitSequenceNode:
	Receiver: a TypingVisitor
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(count := count + 1.
cardNums size == i & (count >...etc..
	Receiver's instance variables: 
		typeStack: 	a Stack(a Dictionary(#count->SmallInteger #lista->Array #straight->F...etc...


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(count := count + 1.
cardNums size == i & (count >= 5)
	ifTrue: [ straight :...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a TypingVisito
	Receiver's instance variables: 
		parent: 	RBBlockNode([ count := count + 1.
cardNums size == i & (count >= 5)
	if...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		sTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #key
30 January 2021 11:26:48.318794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #key
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	key
		exception: 	MessageNotUnderstood: SmallInteger>> #key
		resumeValue: 	ni
	Receiver's instance variables: 
0

[ :a :c | 
a value > c value
	ifTrue: [ a key ]
	ifFalse: [ c key ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(9 23 15 3 4 5 8 6 7)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7C'
		val: 	7
		newShuf: 	#('9C' '10D' '2D' '3C' '4C' '5C' '8C' '6C' '7C')
		card: 	'10D'
		tempCard: 	nil
		cardNums: 	#(2 3 4 5 6 7 8 9 10)
		cardSuits: 	#($C $C $C $C $C $C $C $D $D)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(7)
		count: 	8
		previous: 	$C
		current: 	$D
		sorted: 	a SortedCollection(2 3 4 5 6 7 8 9 10)
		sorted2: 	a Set('9' '4' '7' '2' '5' '8' '10' '3' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10D')
		twoDigits: 	a SortedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		nice: 	#('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		clubs: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		diamonds: 	an OrderedCollection('2D' '10D')
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1-THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #key
30 January 2021 11:27:00.108794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #key
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	key
		exception: 	MessageNotUnderstood: SmallInteger>> #key
		resumeValue: 	ni
	Receiver's instance variables: 
0

[ :a :c | 
a value > c value
	ifTrue: [ a key ]
	ifFalse: [ c key ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #key
30 January 2021 11:28:11.765794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #key
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	key
		exception: 	MessageNotUnderstood: SmallInteger>> #key
		resumeValue: 	ni
	Receiver's instance variables: 
0

[ :a :c | 
a value > c value
	ifTrue: [ a key ]
	ifFalse: [ c key ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		lista: 	#(9 23 15 3 4 5 8 6 7)
		deckwinner: 	nil
		shuf: 	nil
		here: 	nil
		temp: 	'10'
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'7C'
		val: 	7
		newShuf: 	#('9C' '10D' '2D' '3C' '4C' '5C' '8C' '6C' '7C')
		card: 	'10D'
		tempCard: 	nil
		cardNums: 	#(2 3 4 5 6 7 8 9 10)
		cardSuits: 	#($C $C $C $C $C $C $C $D $D)
		valueStreaks: 	a Set(1)
		suitStreaks: 	a Set(7)
		count: 	8
		previous: 	$C
		current: 	$D
		sorted: 	a SortedCollection(2 3 4 5 6 7 8 9 10)
		sorted2: 	a Set('9' '4' '7' '2' '5' '8' '10' '3' '6')
		straight: 	True
		flush: 	nil
		threeDigits: 	a SortedCollection('10D')
		twoDigits: 	a SortedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		nice: 	#('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		clubs: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		diamonds: 	an OrderedCollection('2D' '10D')
		hearts: 	an OrderedCollection()
		spades: 	an OrderedCollection()
		count2: 	nil
		previous2: 	nil
		temp2: 	$D
		suitsInHand: 	a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 )
		valuesInHand: 	a Dictionary(1->0 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->1 1...etc...
		streaks: 	an OrderedCollection('2D' '3C' '4C' '5C' '6C' '7C' '8C' '9C' '10D')
		hand: 	nil
		found: 	nil
		notFound: 	true
		previousCard: 	'9C'
		highestStreaks: 	an OrderedCollection('6C' '7C' '8C' '9C' '10D')
		highestSuitStreak: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		suitStreak: 	an OrderedCollection('3C' '4C' '5C' '6C' '7C' '8C' '9C')
		maxSuit: 	nil
		a: 	0
		c: 	
	Receiver's instance variables: 
nil

[ :each | nextValue := binaryBlock value: nextValue value: each ] in Dictionary(Collection)>>inject:into:
	Receiver: a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 )
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
a value > c value
	ifTrue: [ a key ]
	ifFalse: [ c key ...etc...
		nextValue: 	0
		each: 	
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->0. nil. 'S'->0. 'C'->7. 'D'->2}


Dictionary>>valuesDo:
	Receiver: a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 )
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		eachIndex: 	1
		eachAssociation: 	'H'->
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->0. nil. 'S'->0. 'C'->7. 'D'->2}


Dictionary>>do:
	Receiver: a Dictionary('C'->7 'D'->2 'H'->0 'S'->0 )
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:45:23.907794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand |
	hand := Poker deal: #(9 8 7 6 5 4 3 2 1).
	^ Transcript
		...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:45:38.674794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand |
	hand := Poker deal: #(9 8 7 6 5 4 3 2 1).
	^ Transcript
		...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(404141824))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7720156
		lastStepMessage: 	nil
		lastCycleTime: 	7720210
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7720156
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:46:11.644794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: hand.
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(975177984))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7753164
		lastStepMessage: 	nil
		lastCycleTime: 	7753185
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7753164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7753164
		lastStepMessage: 	nil
		lastCycleTime: 	7753185
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7753164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7753164
		lastStepMessage: 	nil
		lastCycleTime: 	7753185
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7753164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:47:10.425794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: hand.
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(153672960))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7811935
		lastStepMessage: 	nil
		lastCycleTime: 	7811962
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7811935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7811935
		lastStepMessage: 	nil
		lastCycleTime: 	7811962
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7811935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7811935
		lastStepMessage: 	nil
		lastCycleTime: 	7811962
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7811935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:49:49.425794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: hand.
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(983119104))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7970887
		lastStepMessage: 	nil
		lastCycleTime: 	7970954
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7970887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7970887
		lastStepMessage: 	nil
		lastCycleTime: 	7970954
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7970887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	7970887
		lastStepMessage: 	nil
		lastCycleTime: 	7970954
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	7970887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:51:55.852794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poke
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	poker := Poker new.
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(975335680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8097350
		lastStepMessage: 	nil
		lastCycleTime: 	8097392
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8097350
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8097350
		lastStepMessage: 	nil
		lastCycleTime: 	8097392
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8097350
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8097350
		lastStepMessage: 	nil
		lastCycleTime: 	8097392
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8097350
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a DicTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 11:52:05.119794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	117
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	117
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades')
		newShuf: 	#(
	Receiver's instance variables: 
		deal: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poke
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	poker := Poker new.
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(692173056))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:52:30.591794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: h...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@240)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(465007360))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8132095
		lastStepMessage: 	nil
		lastCycleTime: 	8132126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8132095
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8132095
		lastStepMessage: 	nil
		lastCycleTime: 	8132126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8132095
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8132095
		lastStepMessage: 	nil
		lastCycleTime: 	8132126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8132095
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPooTHERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 11:52:42.255794 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: h...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@240)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(789320448))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8143755
		lastStepMessage: 	nil
		lastCycleTime: 	8143784
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8143755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8143755
		lastStepMessage: 	nil
		lastCycleTime: 	8143784
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8143755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8143755
		lastStepMessage: 	nil
		lastCycleTime: 	8143784
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8143755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 12:02:58.446794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: h...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@240)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(762956544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8759953
		lastStepMessage: 	nil
		lastCycleTime: 	8759975
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8759953
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8759953
		lastStepMessage: 	nil
		lastCycleTime: 	8759975
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8759953
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8759953
		lastStepMessage: 	nil
		lastCycleTime: 	8759975
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8759953
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1THERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 12:05:33.614794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: h...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@240)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(897445632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8915108
		lastStepMessage: 	nil
		lastCycleTime: 	8915152
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8915108
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8915108
		lastStepMessage: 	nil
		lastCycleTime: 	8915152
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8915108
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	8915108
		lastStepMessage: 	nil
		lastCycleTime: 	8915152
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	8915108
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an THERE_BE_DRAGONS_HERE
InvalidSlotName: hand,shuf is an invalid name for a slot
30 January 2021 12:06:49.485794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

InstanceVariableSlot class(Slot class)>>checkValidName:
	Receiver: InstanceVariableSlot
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
InvalidSlotName: hand, is an invalid name for a slot
30 January 2021 12:06:57.631794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

InstanceVariableSlot class(Slot class)>>checkValidName:
	Receiver: InstanceVariableSlot
	Arguments and temporary variables: 
		aSymbol: 	#'hand,
	Receiver's instance variables: 
		superclass: 	IndexedSlot
		methodDict: 	a MethodDictionary(#asRingMinimalDefinitionIn:->InstanceVariableSlo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AbstractInitializedSlot. AccessorInstanceVariableSlot. BaseSlot. R...etc...
		name: 	#InstanceVariableSlot
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Variables'
		slotClassDefinition: 	nil


InstanceVariableSlot class(Slot class)>>named:
	Receiver: InstanceVariableSlot
	Arguments and temporary variables: 
		aSymbol: 	#'hand,
	Receiver's instance variables: 
		superclass: 	IndexedSlot
		methodDict: 	a MethodDictionary(#asRingMinimalDefinitionIn:->InstanceVariableSlo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AbstractInitializedSlot. AccessorInstanceVariableSlot. BaseSlot. R...etc...
		name: 	#InstanceVariableSlot
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Variables'
		slotClassDefinition: 	nil


ByteSymbol(Symbol)>>asSlot
	Receiver: #'hand,'
	Arguments and temporary variables: 

	Receiver's instance variables: 
#'hand,'

ByteString(String)>>asSlot
	Receiver: 'hand,'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'hand,'

[ :substring | substring asSlot ] in ByteString(String)>>asSlotCollection
	Receiver: 'hand, shuf'
	Arguments and temporary variables: 
		whitespaces: 	' 	
'
		substring: 	'hand,
	Receiver's instance variables: 
'hand, shuf'

Array(SequenceableCollection)>>collect:
	Receiver: #('hand,' 'shuf')
	Arguments and temporary variables: 
		aBlock: 	[ :substring | substring asSlot ]
		newCollection: 	#(nil nil)
		index: 	
	Receiver's instance variables: 
#('hand,' 'shuf')

ByteString(String)>>asSlotCollection
	Receiver: 'hand, shuf'
	Arguments and temporary variables: 
		whitespaces: 	' 	

	Receiver's instance variables: 
'hand, shuf'

[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment ] in Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#Poker
		f: 	'hand, shuf'
		d: 	''
		s: 	''
		cat: 	'CPS506'
		builder: 	a ShiftClassBuilde
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 442)
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Exception. Path. Stream. AbstractDelayTicker. AbstractLayout. Abst...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


ShiftClassInstaller>>make:
	Receiver: a ShiftClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc..
	Receiver's instance variables: 
		oldClass: 	nil
		builder: 	a ShiftClassBuilder
		installingEnvironment: 	nil


ShiftClassInstaller class>>make:
	Receiver: ShiftClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc..
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#builder->ShiftClassInstaller>>#builder #comment...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ShiftAnonymousClassInstaller}
		name: 	#ShiftClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Shift-ClassInstaller-Base'


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	ArgTHERE_BE_DRAGONS_HERE
Instance of Poker class did not understand #deal:
30 January 2021 12:07:13.822794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Poker class(Object)>>doesNotUnderstand: #deal:
	Receiver: Poker
	Arguments and temporary variables: 
		aMessage: 	deal: #(9 8 7 6 5 4 3 2 1)
		exception: 	MessageNotUnderstood: Poker class>> #deal:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deal:->Poker>>#deal: #getData:->Poker>>#getData...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Poker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CPS506


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| hand poker |
	hand := #(9 8 7 6 5 4 3 2 1).
	hand := Poker deal: h...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@240)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(356110592))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9015291
		lastStepMessage: 	nil
		lastCycleTime: 	9015350
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9015291
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9015291
		lastStepMessage: 	nil
		lastCycleTime: 	9015350
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9015291
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9015291
		lastStepMessage: 	nil
		lastCycleTime: 	9015350
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9015291
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganizatioTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:09:55.677794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(54153472))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9177184
		lastStepMessage: 	nil
		lastCycleTime: 	9177215
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9177184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9177184
		lastStepMessage: 	nil
		lastCycleTime: 	9177215
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9177184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	aTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:12:31.978794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(9144064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9333425
		lastStepMessage: 	nil
		lastCycleTime: 	9333495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9333425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9333425
		lastStepMessage: 	nil
		lastCycleTime: 	93THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:14:04.807794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(748923648))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9426302
		lastStepMessage: 	nil
		lastCycleTime: 	9426345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9426302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9426302
		lastStepMessage: 	nil
		lastCycleTime: 	9426345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9426302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9426302
		lastStepMessage: 	nil
		lastCycleTime: 	9426345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9426302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldStTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:14:58.567794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	109
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	109
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(121956096))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9480046
		lastStepMessage: 	nil
		lastCycleTime: 	9480096
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9480046
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9480046
		lastStepMessage: 	nil
		lastCycleTime: 	9480096
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9480046
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9480046
		lastStepMessage: 	nil
		lastCycleTime: 	9480096
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9480046
		menuTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:16:59.251794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(432811776) a RubCursor(950034176...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(457822464))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9600722
		lastStepMessage: 	nil
		lastCycleTime: 	9600776
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9600722
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments andTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:19:25.126794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(530347264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9746638
		lastStepMessage: 	nil
		lastCycleTime: 	9746663
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9746638
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9746638
		lastStepMessage: 	nil
		lastCycleTime: 	9746663
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9746638
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9746638
		lastStepMessage: 	nil
		lastCycleTime: 	9746663
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9746638
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnaTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:20:43.591794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	116
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(982616320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9825089
		lastStepMessage: 	nil
		lastCycleTime: 	9825118
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9825089
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9825089
		lastStepMessage: 	nil
		lastCycleTime: 	9825118
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9825089
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	9825089
		lastStepMessage: 	nil
		lastCycleTime: 	9825118
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	9825089
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 12:29:34.679794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#()

Array(Object)>>at:put:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
		value: 	'9Clubs
	Receiver's instance variables: 
#()

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		temp: 	1
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades')
		output: 	'9Clubs'
		val: 	9
		i: 	
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(588630784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 12:30:34.536794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#()

Array(Object)>>at:put:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
		value: 	'9Clubs
	Receiver's instance variables: 
#()

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		temp: 	1
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades')
		output: 	'9Clubs'
		val: 	9
		i: 	
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(37608704))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10416005
		lastStepMessage: 	nil
		lastCycleTime: 	10416064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10416005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10416005
		lastStepMessage: 	nil
		lastCycleTime: 	10416064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10416005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10416005
		lastStepMessage: 	nil
		lastCycleTime: 	10416064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10416005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClasTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:34:49.357794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifTrue: [ values at: 13 ...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	117
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifTrue: [ values at: 13 ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	117
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifTru...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades'
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(787597056))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10670862
		lastStepMessage: 	nil
		lastCycleTime: 	10670887
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10670862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10670862
		lastStepMessage: 	nil
		lastCycleTime: 	10670887
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10670862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10670862
		lastStepMessage: 	nil
		lastCycleTime: 	10670887
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10670862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HanTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 12:36:47.153794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#()

Array(Object)>>at:put:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
		value: 	'9Clubs
	Receiver's instance variables: 
#()

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		temp: 	1
		values: 	#('ace' '2' '3' '4' '5' '6' '7' '8' '9' '10' 'Jack' 'Queen' 'King')
		suits: 	#('Clubs' 'Diamonds' 'Hearts' 'Spades')
		output: 	'9Clubs'
		val: 	9
		i: 	
	Receiver's instance variables: 
		hand: 	#()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	input := #(9 8 7 6 5 4 3 2 1).
	poker := Po...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@221)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(195707648))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10788623
		lastStepMessage: 	nil
		lastCycleTime: 	10788686
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10788623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10788623
		lastStepMessage: 	nil
		lastCycleTime: 	10788686
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10788623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	10788623
		lastStepMessage: 	nil
		lastCycleTime: 	10788686
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	10788623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nilTHERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 1 argument, but was called with 0 arguments.
30 January 2021 12:48:04.376794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	
	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	125
		numArgs: 	1


BlockClosure>>value
	Receiver: [ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFalse: [ values at: te...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Poker>>deal:
		startpc: 	125
		numArgs: 	1


SmallInteger(Integer)>>timesRepeat:
	Receiver: 9
	Arguments and temporary variables: 
		aBlock: 	[ :i | 
val := shuf at: i.
temp := val % 13.
output := temp == 0
	ifFal...etc...
		count: 	
	Receiver's instance variables: 
9

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		output: 	nil
		val: 	nil
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S'
	Receiver's instance variables: 
		hand: 	#(nil nil nil nil nil nil nil nil nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(9 8 7 6 5 4 3...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948324608))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11465843
		lastStepMessage: 	nil
		lastCycleTime: 	11465904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11465843
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11465843
		lastStepMessage: 	nil
		lastCycleTime: 	11465904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11465843
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11465843
		lastStepMeTHERE_BE_DRAGONS_HERE
Instance of Array did not understand #convert
30 January 2021 12:55:00.655794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #convert
	Receiver: #(9 8 7 6 5 4 3 2 1)
	Arguments and temporary variables: 
		aMessage: 	convert
		exception: 	MessageNotUnderstood: Array>> #convert
		resumeValue: 	ni
	Receiver's instance variables: 
#(9 8 7 6 5 4 3 2 1)

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(9 8 7 6 5 4 3...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(666983680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11882128
		lastStepMessage: 	nil
		lastCycleTime: 	11882184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11882128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11882128
		lastStepMessage: 	nil
		lastCycleTime: 	11882184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11882128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11882128
		lastStepMessage: 	nil
		lastCycleTime: 	11882184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11882128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursTHERE_BE_DRAGONS_HERE
Instance of Array did not understand #convert
30 January 2021 12:56:27.629794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>doesNotUnderstand: #convert
	Receiver: #(9 8 7 6 5 4 3 2 1)
	Arguments and temporary variables: 
		aMessage: 	convert
		exception: 	MessageNotUnderstood: Array>> #convert
		resumeValue: 	ni
	Receiver's instance variables: 
#(9 8 7 6 5 4 3 2 1)

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
		hand: 	#(9 8 7 6 5 4 3 2 1)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(9 8 7 6 5 4 3...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(198576384))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11969099
		lastStepMessage: 	nil
		lastCycleTime: 	11969160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11969099
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11969099
		lastStepMessage: 	nil
		lastCycleTime: 	11969160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11969099
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	11969099
		lastStepMessage: 	nil
		lastCycleTime: 	11969160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	11969099
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#THERE_BE_DRAGONS_HERE
#% was sent to nil
30 January 2021 1:02:22.598794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #%
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	% 13
		exception: 	MessageNotUnderstood: receiver of "%" is nil
		resumeValue: 	ni
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #%
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	% 13
		exception: 	nil
		resumeValue: 	nil
		node: 	ni
	Receiver's instance variables: 
nil

Poker>>convert
	Receiver: a Poker
	Arguments and temporary variables: 
		temp: 	nil
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	nil
		val: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#(nil nil nil nil nil nil nil nil nil)


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1
	Receiver's instance variables: 
		hand: 	#(nil nil nil nil nil nil nil nil nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(9 8 7 6 5 4 3...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1046964480))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	12324059
		lastStepMessage: 	nil
		lastCycleTime: 	12324125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	12324059
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 6
30 January 2021 1:51:23.286794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('5C' '6C' '7C' '8C' '9C')
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#('5C' '6C' '7C' '8C' '9C' nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection>>at:
	Receiver: an OrderedCollection('5C' '6C' '7C' '8C' '9C')
	Arguments and temporary variables: 
		anInteger: 	6
		index: 	
	Receiver's instance variables: 
		array: 	#('5C' '6C' '7C' '8C' '9C' nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	5


Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 6
30 January 2021 1:53:17.796794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('5C' '6C' '7C' '8C' '9C')
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#('5C' '6C' '7C' '8C' '9C' nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection>>at:
	Receiver: an OrderedCollection('5C' '6C' '7C' '8C' '9C')
	Arguments and temporary variables: 
		anInteger: 	6
		index: 	
	Receiver's instance variables: 
		array: 	#('5C' '6C' '7C' '8C' '9C' nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	5


Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		nice: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		streaks: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		notFound: 	true
		previousCard: 	'9C'
		previous: 	'9'
		card: 	'9C'
		current: 	'9'
		highestStreak: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		sorted: 	#('1C' '2C' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		data: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7-...etc...
		straight: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		flush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		straightFlush: 	ni
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(179335936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	15379300
		lastStepMessage: 	nil
		lastCycleTime: 	15379325
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	15379300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0THERE_BE_DRAGONS_HERE
Instance of Dictionary did not understand #copyFrom:to:
30 January 2021 2:51:37.664794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary(Object)>>doesNotUnderstand: #copyFrom:to:
	Receiver: a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->...etc...
	Arguments and temporary variables: 
		aMessage: 	copyFrom: 1 to: 4
		exception: 	MessageNotUnderstood: Dictionary>> #copyFrom:to:
		resumeValue: 	ni
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->1. 2->1. 3->1. 4->1. 5->1. 6->1. 7->1. 8->1. 9->1. 10->0. 11->0...etc...


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		sorted: 	#('1C' '2C' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		data: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7-...etc...
		straight: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		flush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		straightFlush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(701128448))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(313.0@290.0)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	18878915
		lastStepMessage: 	nil
		lastCycleTime: 	18878938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	18878915
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StTHERE_BE_DRAGONS_HERE
ValueNotFound: value 4 not found in Dictionary
30 January 2021 2:52:13.541794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorValueNotFound:
	Receiver: a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->...etc...
	Arguments and temporary variables: 
		value: 	
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->1. 2->1. 3->1. 4->1. 5->1. 6->1. 7->1. 8->1. 9->1. 10->0. 11->0...etc...


[ self errorValueNotFound: value ] in Dictionary>>keyAtValue:
	Receiver: a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->...etc...
	Arguments and temporary variables: 
		value: 	
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->1. 2->1. 3->1. 4->1. 5->1. 6->1. 7->1. 8->1. 9->1. 10->0. 11->0...etc...


Dictionary>>keyAtValue:ifAbsent:
	Receiver: a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->...etc...
	Arguments and temporary variables: 
		value: 	4
		exceptionBlock: 	[ self errorValueNotFound: value 
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->1. 2->1. 3->1. 4->1. 5->1. 6->1. 7->1. 8->1. 9->1. 10->0. 11->0...etc...


Dictionary>>keyAtValue:
	Receiver: a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7->1 8->1 9->1 10->...etc...
	Arguments and temporary variables: 
		value: 	
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->1. 2->1. 3->1. 4->1. 5->1. 6->1. 7->1. 8->1. 9->1. 10->0. 11->0...etc...


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		sorted: 	#('1C' '2C' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		data: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7-...etc...
		straight: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		flush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		straightFlush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		maxNumOfAKind: 	4
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #asCharacter
30 January 2021 3:01:03.109794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #asCharacter
	Receiver: 'C'
	Arguments and temporary variables: 
		aMessage: 	asCharacter
		exception: 	MessageNotUnderstood: ByteString>> #asCharacter
		resumeValue: 	ni
	Receiver's instance variables: 
'C'

Poker>>returnSuitCards:
	Receiver: a Poker
	Arguments and temporary variables: 
		suit: 	'C'
		cardsOfAKind: 	an OrderedCollection()
		card: 	'9C'
		temp: 	$C
		i: 	
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(9 8 7 6 5 4 3 2 1)
		sorted: 	#('1C' '2C' '3C' '4C' '5C' '6C' '7C' '8C' '9C')
		data: 	a Dictionary('C'->9 'D'->0 'H'->0 'S'->0 1->1 2->1 3->1 4->1 5->1 6->1 7-...etc...
		straight: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		flush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		straightFlush: 	an OrderedCollection('5C' '6C' '7C' '8C' '9C')
		maxNumOfAKind: 	9
		suitOfAKind: 	'C'
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('9C' '8C' '7C' '6C' '5C' '4C' '3C' '2C' '1C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(9 8 7 6 5 4 3 2 1)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(844368128))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(313.0@290.0)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	19444616
		lastStepMessage: 	nil
		lastCycleTime: 	19444637
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	19444616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	19444616
		lastStepMessage: 	nil
		lastCycleTime: 	19444637
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	19444616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	19444616
		lastStepMessage: 	nil
		lastCycleTime: 	19444637
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	19444616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #asSymbol
30 January 2021 3:39:31.824794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #asSymbol
	Receiver: 4
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: SmallInteger>> #asSymbol
		resumeValue: 	ni
	Receiver's instance variables: 
4

Poker>>returnSuitCards:
	Receiver: a Poker
	Arguments and temporary variables: 
		suit: 	4
		cardsOfAKind: 	an OrderedCollection()
		card: 	'4C'
		temp: 	$C
		i: 	
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	a Dictionary('C'->4 'D'->2 'H'->0 'S'->3 1->0 2->0 3->0 4->4 5->0 6->0 7-...etc...
		straight: 	an OrderedCollection()
		flush: 	an OrderedCollection('4C' '4C' '12D' '13S' '13S')
		straightFlush: 	an OrderedCollection()
		maxNumOfAKind: 	4
		suitOfAKind: 	4
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(197069568))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	21753320
		lastStepMessage: 	nil
		lastCycleTime: 	21753344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	21753320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [otherTHERE_BE_DRAGONS_HERE
Instance of Dictionary did not understand #copyFrom:to:
30 January 2021 3:41:03.069794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary(Object)>>doesNotUnderstand: #copyFrom:to:
	Receiver: a Dictionary('C'->4 'D'->2 'H'->0 'S'->3 1->0 2->0 3->0 4->4 5->0 6->0 7->0 8->0 9->0 10->...etc...
	Arguments and temporary variables: 
		aMessage: 	copyFrom: 14 to: 17
		exception: 	MessageNotUnderstood: Dictionary>> #copyFrom:to:
		resumeValue: 	ni
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->0. 2->0. 3->0. 4->4. 5->0. 6->0. 7->0. 8->0. 9->0. 10->1. 11->0...etc...


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	a Dictionary('C'->4 'D'->2 'H'->0 'S'->3 1->0 2->0 3->0 4->4 5->0 6->0 7-...etc...
		straight: 	an OrderedCollection()
		flush: 	an OrderedCollection('4C' '4C' '12D' '13S' '13S')
		straightFlush: 	an OrderedCollection()
		maxNumOfAKind: 	4
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(582475008))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	21844550
		lastStepMessage: 	nil
		lastCycleTime: 	21844593
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	21844550
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	21844550
		lastStepMessage: 	nil
		lastCycleTime: 	21844593
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	21844550
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	THERE_BE_DRAGONS_HERE
Instance of Dictionary did not understand #copyFrom:to:
30 January 2021 3:45:47.918794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary(Object)>>doesNotUnderstand: #copyFrom:to:
	Receiver: a Dictionary('C'->4 'D'->2 'H'->0 'S'->3 1->0 2->0 3->0 4->4 5->0 6->0 7->0 8->0 9->0 10->...etc...
	Arguments and temporary variables: 
		aMessage: 	copyFrom: 14 to: 17
		exception: 	MessageNotUnderstood: Dictionary>> #copyFrom:to:
		resumeValue: 	ni
	Receiver's instance variables: 
		tally: 	17
		array: 	{nil. 1->0. 2->0. 3->0. 4->4. 5->0. 6->0. 7->0. 8->0. 9->0. 10->1. 11->0...etc...


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	a Dictionary('C'->4 'D'->2 'H'->0 'S'->3 1->0 2->0 3->0 4->4 5->0 6->0 7-...etc...
		straight: 	an OrderedCollection()
		flush: 	an OrderedCollection('4C' '4C' '12D' '13S' '13S')
		straightFlush: 	an OrderedCollection()
		maxNumOfAKind: 	4
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(645296896))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@405.0)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	22129425
		lastStepMessage: 	nil
		lastCycleTime: 	22129456
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	22129425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	22129425
		lastStepMessage: 	nil
		lastCycleTime: 	22129456
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	22129425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	22129425
		lastStepMessage: 	nil
		lastCycleTime: 	22129456
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	22129425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorphTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
30 January 2021 4:24:12.443794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#values was sent to nil
30 January 2021 4:25:37.939794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #values
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	values
		exception: 	MessageNotUnderstood: receiver of "values" is nil
		resumeValue: 	ni
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #values
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	values
		exception: 	nil
		resumeValue: 	nil
		node: 	ni
	Receiver's instance variables: 
nil

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flush: 	an OrderedCollection('4C' '4C' '4C' '4C')
		straightFlush: 	an OrderedCollection()
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(595275520))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@405.0)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	24519403
		lastStepMessage: 	nil
		lastCycleTime: 	24519469
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	24519403
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	24519403
		lastStepMessage: 	nil
		lastCycleTime: 	24519469
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	24519403
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	24519403
		lastStepMessage: 	nil
		lastCycleTime: 	24519469
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	24519403
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
30 January 2021 4:33:45.213794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection('4C' '4C' '4C' '4C')
		straightFlush: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(731937536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@405.0)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	25006713
		lastStepMessage: 	nil
		lastCycleTime: 	25006743
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	25006713
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1920@1017)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1001)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [worldTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
30 January 2021 4:38:12.591794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 4 4 52 52 52 23 25)
		sorted: 	#('4C' '4C' '4C' '4C' '10D' '12D' '13S' '13S' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection('4C' '4C' '4C' '4C')
		straightFlush: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '4C' '4C' '13S' '13S' '13S' '10D' '12D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		input: 	#(4 4 4 4 52 52 52 23 25)
		poker: 	a Poker
		youSaid: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| input poker youSaid |
	Transcript clear.
	input := #(4 4 4 4 52 52...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(734387968)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(734387968)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@259)
		owner: 	a TransformWithLayoutMorph(197924608)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1039977216) a RubCursor(95003417...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (406470400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(69404928)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950034176)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(20530944))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(406617344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	25274091
		lastStepMessage: 	nil
		lastCycleTime: 	25274126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	25274091
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1002)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1002)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1002)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(740038912) named: Pl...etc...
		lastStepTime: 	25274091
		lastStepMessage: 	nil
		lastCycleTime: 	25274126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950034176)))
		lastAlarmTime: 	25274091
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 9
30 January 2021 6:13:50.685794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(1 5 4 2 38 3 33 4)
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#(1 5 4 2 38 3 33 4)

Array(Object)>>at:
	Receiver: #(1 5 4 2 38 3 33 4)
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#(1 5 4 2 38 3 33 4)

Poker>>convert:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4)
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'4C'
		val: 	4
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' nil)


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4)
		sorted: 	nil
		data: 	nil
		straight: 	nil
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
30 January 2021 6:17:45.572794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'h'
	Arguments and temporary variables: 
		start: 	2
		stop: 	1
		replacementCollection: 	nil
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
'h'

ByteString(SequenceableCollection)>>,
	Receiver: 'h'
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
'h'

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		nice: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		streaks: 	an OrderedCollection('12H' '13S')
		notFound: 	true
		previousCard: 	'12H'
		previous: 	'12'
		card: 	'13S'
		current: 	'13'
		highestStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	nil
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
30 January 2021 6:17:57.880794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'h'
	Arguments and temporary variables: 
		start: 	2
		stop: 	1
		replacementCollection: 	nil
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
'h'

ByteString(SequenceableCollection)>>,
	Receiver: 'h'
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
'h'

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		nice: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		streaks: 	an OrderedCollection('12H' '13S')
		notFound: 	true
		previousCard: 	'12H'
		previous: 	'12'
		card: 	'13S'
		current: 	'13'
		highestStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	nil
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announTHERE_BE_DRAGONS_HERE
Instance of TTranscript classTrait did not understand #show:
30 January 2021 6:41:07.231794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

TTranscript classTrait(Object)>>doesNotUnderstand: #show:
	Receiver: TTranscript
	Arguments and temporary variables: 
		aMessage: 	show: #('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		exception: 	MessageNotUnderstood: TTranscript classTrait>> #show:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'<<'->TTranscript>>#'<<' #clear->TTranscript>>#...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TTranscript
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Transcript-Core-Traits'
		users: 	an IdentitySet()


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	nil
		maxCount: 	nil
		valueStreak: 	an OrderedCollection()
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	nil
		current: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	nil
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:53:35.048794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursoTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:54:04.595794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(183531776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:55:21.175794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(264241920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33502651
		lastStepMessage: 	nil
		lastCycleTime: 	33502712
		alarms: 	a Heap()
		lastAlarmTime: 	33502651
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:55:54.569794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(803895040))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33536055
		lastStepMessage: 	nil
		lastCycleTime: 	33536106
		alarms: 	a Heap()
		lastAlarmTime: 	33536055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 gTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:56:18.136794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1007255808))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33559639
		lastStepMessage: 	nil
		lastCycleTime: 	33559673
		alarms: 	a Heap()
		lastAlarmTime: 	33559639
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33559639
		lastTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:56:44.124794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(102005504))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33585639
		lastStepMessage: 	nil
		lastCycleTime: 	33585661
		alarms: 	a Heap()
		lastAlarmTime: 	33585639
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variaTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:56:47.875794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1019000064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33589374
		lastStepMessage: 	nil
		lastCycleTime: 	33589410
		alarms: 	a Heap()
		lastAlarmTime: 	33589374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33589374
		lastStepMessage: 	nil
		lastCycleTime: 	33589410
		alarms: 	a Heap()
		lastAlarmTime: 	33589374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:57:20.320794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(991115520))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33621824
		lastStepMessage: 	nil
		lastCycleTime: 	33621857
		alarms: 	a Heap()
		lastAlarmTime: 	33621824
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 6:58:03.465794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(776831744))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33664968
		lastStepMessage: 	nil
		lastCycleTime: 	33665002
		alarms: 	a Heap()
		lastAlarmTime: 	33664968
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and tempTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in ByteString
30 January 2021 6:58:22.323794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>shouldNotImplement
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(ArrayedCollection)>>add:
	Receiver: '1C'
	Arguments and temporary variables: 
		newObject: 	'2C
	Receiver's instance variables: 
'1C'

Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'2C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C' 'D'->an OrderedCollection() 'H'->an OrderedC...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(507246848))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in ByteString
30 January 2021 6:59:34.763794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>shouldNotImplement
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(ArrayedCollection)>>add:
	Receiver: '1C'
	Arguments and temporary variables: 
		newObject: 	'2C
	Receiver's instance variables: 
'1C'

Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'2C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection('1C')
		dataInHand: 	a Dictionary('C'->'1C' 'D'->an OrderedCollection('1C') 'H'->an Orde...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(602296576))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33756235
		lastStepMessage: 	nil
		lastCycleTime: 	33756296
		alarms: 	a Heap()
		lastAlarmTime: 	33756235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33756235
		lastStepMessage: 	nil
		lastCycleTime: 	33756296
		alarms: 	a Heap()
		lastAlarmTime: 	33756235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33756235
		lTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in ByteString
30 January 2021 7:00:09.256794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>shouldNotImplement
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(ArrayedCollection)>>add:
	Receiver: '1C'
	Arguments and temporary variables: 
		newObject: 	'2C
	Receiver's instance variables: 
'1C'

Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'2C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection('1C')
		dataInHand: 	a Dictionary('C'->'1C' 'D'->an OrderedCollection('1C') 'H'->an Orde...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(932696832))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33790762
		lastStepMessage: 	nil
		lastCycleTime: 	33790793
		alarms: 	a Heap()
		lastAlarmTime: 	33790762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33790762
		lastStepMessage: 	nil
		lastCycleTime: 	33790793
		alarms: 	a Heap()
		lastAlarmTime: 	33790762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33790762
		lastStepMessage: 	nil
		lastCycleTime: 	33790793
		alarms: 	a Heap()
		lastAlarmTime: 	33790762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in ByteString
30 January 2021 7:01:21.257794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>shouldNotImplement
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(ArrayedCollection)>>add:
	Receiver: '1C'
	Arguments and temporary variables: 
		newObject: 	'2C
	Receiver's instance variables: 
'1C'

Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'2C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C' 'D'->an OrderedCollection() 'H'->an OrderedC...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(361756928))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33862767
		lastStepMessage: 	nil
		lastCycleTime: 	33862794
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(524094720)))
		lastAlarmTime: 	33862767
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33862767
		lastStepMessage: 	nil
		lastCycleTime: 	33862794
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(524094720)))
		lastAlarmTime: 	33862767
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33862767
		lastStepMessage: 	nil
		lastCyclTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 7:01:51.768794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $C
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$C

Character(Object)>>errorNotIndexable
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Character(Object)>>size
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	an OrderedCollection($C $4 $C $5 $C)
		streaks: 	an OrderedCollection()
		notFound: 	true
		previousCard: 	$C
		previous: 	nil
		card: 	nil
		current: 	nil
		highestStreak: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	an OrderedCollection($C $4 $C $5 $C)
		straightFlush: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(432408832))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33893263
		lastStepMessage: 	nil
		lastCycleTime: 	33893305
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(524094720)))
		lastAlarmTime: 	33893263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33893263
		lastStepMessage: 	nil
		lastCycleTime: 	33893305
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(524094720)))
		lastAlarmTime: 	33893263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33893263
		lastStepMessage: 	nil
		lastCycleTime: 	33893305
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursorTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 7:02:59.707794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $C
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$C

Character(Object)>>errorNotIndexable
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Character(Object)>>size
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	an OrderedCollection($C $4 $C $5 $C)
		streaks: 	an OrderedCollection()
		notFound: 	true
		previousCard: 	$C
		previous: 	nil
		card: 	nil
		current: 	nil
		highestStreak: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	an OrderedCollection($C $4 $C $5 $C)
		straightFlush: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(6957312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33961223
		lastStepMessage: 	nil
		lastCycleTime: 	33961245
		alarms: 	a Heap()
		lastAlarmTime: 	33961223
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33961223
		lastStepMessage: 	nil
		lastCycleTime: 	33961245
		alarms: 	a Heap()
		lastAlarmTime: 	33961223
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	33961223
		lastStepMessage: 	nil
		lastCycleTime: 	33961245
		alarms: 	a Heap()
		lastAlarmTime: 	33961223
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 7:10:14.233794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(306989312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34395744
		lastStepMessage: 	nil
		lastCycleTime: 	34395769
		alarms: 	a Heap()
		lastAlarmTime: 	34395744
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 7:11:10.051794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Dictionary>>at:
	Receiver: a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection() 'H'->an OrderedCollec...etc...
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array('H'->an OrderedCollection() nil 'S'->an OrderedCollection() 'C'...etc...


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->an OrderedCollection() 'D'->an OrderedCollection(...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(619686656))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34451560
		lastStepMessage: 	nil
		lastCycleTime: 	34451585
		alarms: 	a Heap()
		lastAlarmTime: 	34451560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HaTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 7:13:55.959794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(773606144))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34617465
		lastStepMessage: 	nil
		lastCycleTime: 	34617496
		alarms: 	a Heap()
		lastAlarmTime: 	34617465
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34617465
		lastStepMessage: 	nil
		lastCycleTime: 	34617496
		alarms: 	a Heap()
		lastAlarmTime: 	34617465
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamagTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 7:14:39.041794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $C
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$C

Character(Object)>>errorNotIndexable
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Character(Object)>>size
	Receiver: $C
	Arguments and temporary variables: 

	Receiver's instance variables: 
$C

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	an OrderedCollection($C $4 $C $5 $C)
		streaks: 	an OrderedCollection()
		notFound: 	true
		previousCard: 	$C
		previous: 	nil
		card: 	nil
		current: 	nil
		highestStreak: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	an OrderedCollection($C $4 $C $5 $C)
		straightFlush: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(178411264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34660549
		lastStepMessage: 	nil
		lastCycleTime: 	34660577
		alarms: 	a Heap()
		lastAlarmTime: 	34660549
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34660549
		lastStepMessage: 	nil
		lastCycleTime: 	34660577
		alarms: 	a Heap()
		lastAlarmTime: 	34660549
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34660549
		lastStepMessage: 	nil
		lastCycleTime: 	34660577
		alarms: 	a Heap()
		lastAlarmTime: 	34660549
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		bTHERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in ByteString
30 January 2021 7:15:38.786794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>shouldNotImplement
	Receiver: '1C'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1C'

ByteString(ArrayedCollection)>>add:
	Receiver: '1C'
	Arguments and temporary variables: 
		newObject: 	'2C
	Receiver's instance variables: 
'1C'

Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'2C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary($C->'1C' $D->an OrderedCollection() $H->an OrderedColl...etc...
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(25784064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34720283
		lastStepMessage: 	nil
		lastCycleTime: 	34720321
		alarms: 	a Heap()
		lastAlarmTime: 	34720283
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34720283
		lastStepMessage: 	nil
		lastCycleTime: 	34720321
		alarms: 	a Heap()
		lastAlarmTime: 	34720283
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(66THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 7:19:54.320794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $4
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$4

Character(Object)>>errorNotIndexable
	Receiver: $4
	Arguments and temporary variables: 

	Receiver's instance variables: 
$4

Character(Object)>>size
	Receiver: $4
	Arguments and temporary variables: 

	Receiver's instance variables: 
$4

Poker>>getHighestStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	an OrderedCollection($4 $C Character space $5 $C)
		streaks: 	an OrderedCollection()
		notFound: 	true
		previousCard: 	$4
		previous: 	nil
		card: 	nil
		current: 	nil
		highestStreak: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	an OrderedCollection($4 $C Character space $5 $C)
		straightFlush: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313919744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(89440000))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34975831
		lastStepMessage: 	nil
		lastCycleTime: 	34975857
		alarms: 	a Heap()
		lastAlarmTime: 	34975831
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1904@1008)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34975831
		lastStepMessage: 	nil
		lastCycleTime: 	34975857
		alarms: 	a Heap()
		lastAlarmTime: 	34975831
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	34975831
		lastStepMessage: 	nil
		lastCycleTime: 	34975857
		alarms: 	a Heap()
		lastAlarmTime: 	34975831
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1904@1008)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1904@1008)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBoundTHERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 January 2021 7:45:07.259794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		(a ~= ' ' & count) ~= 0
			ifTrue: [ count := count + 1.
				word
					at: count
					put: a
					ifFalse: [ count := count + 1.
						suitStreak add: word.
						word := '' ] ] ].
count size > max
	ifTrue: [ max := aValue size.
		suitStreak := aValue ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	0
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		(a ~= ...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 January 2021 7:45:42.264794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		(a ~= ' ' & count) ~= 0
			ifTrue: [ count := count + 1.
				word
					at: count
					put: a
					ifFalse: [ count := count + 1.
						suitStreak add: word.
						word := '' ] ] ].
count size > max
	ifTrue: [ max := aValue size.
		suitStreak := aValue ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	0
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		(a ~= ...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		(a ~= ...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	0
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(38666THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:50:36.475794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word a...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= '...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:51:12.410794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: a.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: a.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count :=...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: a.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	TranscriTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:52:27.950794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: temp;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: temp;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: temp;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: temp;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:53:25.810794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ co...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variablesTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:55:08.774794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		count ~= 0
			ifTrue: [ temp add: word.
				word := '' ] ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 0
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word a...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 0
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= '...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		a ~= '...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:56:13.808794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		count ~= 0
			ifTrue: [ temp add: word.
				word := '' ] ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 0
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ co...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 0
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection('')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3CTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:56:59.863794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count := count + 1.
		count ~= 1
			ifTrue: [ temp add: word.
				word := '' ] ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 1
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ co...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count := count + 1.
				count ~= 1
					ifTrue: [ temp add: word.
						word := '' ] ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
30 January 2021 7:57:27.484794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	2
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ count := count + 1.
		word at: count put: a ]
	ifFalse: [ count ~= 0
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1 ] ] in [ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count ~= 0
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1 ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 0)
	ifTrue: [ co...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 0)
			ifTrue: [ count := count + 1.
				word at: count put: a ]
			ifFalse: [ count ~= 0
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1 ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 0.
word := ''.
aValue
	do: [ :a | 
		Transc...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 17 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection('1C' '2C' '3C' '4C' '5C')
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4D')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:09:16.503794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1 ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1 ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ wo...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1 ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc..
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:10:04.837794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ wo...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:11:03.794794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc..
	ReceiverTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:12:05.840794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a.
		count := count + 1 ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a.
				count := count + 1 ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a.
				count := count + 1 ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:12:37.792794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a.
		count := count + 1.
		Transcript show: word ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word :=THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 January 2021 8:14:32.518794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: ''
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object
	Receiver's instance variables: 
''

ByteString(Object)>>errorImproperStore
	Receiver: ''
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
30 January 2021 8:14:56.800794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a asCharacter.
		count := count + 1.
		Transcript show: word ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a asCharacter.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a asCharacter.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
30 January 2021 8:17:32.421794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: ''
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object
	Receiver's instance variables: 
''

ByteString(Object)>>errorImproperStore
	Receiver: ''
	Arguments and temporary variables: 

	Receiver's instance variables: 
''

ByteString>>at:put:
	Receiver: ''
	Arguments and temporary variables: 
		index: 	1
		aCharacter: 	#'1
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word at: count - spaces put: a asSymbol.
		count := count + 1.
		Transcript show: word ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a asSymbol.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word at: count - spaces put: a asSymbol.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $HTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:18:55.610794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$1
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word , a.
		count := count + 1.
		Transcript show: word ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word , a.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word , a.
				count := count + 1.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:19:26.699794 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$1
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (count ~= 1)
	ifTrue: [ word := word , a.
		Transcript show: word ]
	ifFalse: [ count ~= 1
			ifTrue: [ temp add: word.
				word := '' ].
		count := count + 1.
		spaces := spaces + 1.
		Transcript
			show: count - spaces;
			cr ] ] in [ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word := word , a.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		aKey: 	$S
		aValue: 	' 13S'
		a: 	$1
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: ' 13S'
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: 'h'.
Transcript
	show: a;
	cr.
a ~= ' ' & (cou...etc...
		index: 	
	Receiver's instance variables: 
' 13S'

[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :a | 
		Transcript show: 'h'.
		Transcript
			show: a;
			cr.
		a ~= ' ' & (count ~= 1)
			ifTrue: [ word := word , a.
				Transcript show: word ]
			ifFalse: [ count ~= 1
					ifTrue: [ temp add: word.
						word := '' ].
				count := count + 1.
				spaces := spaces + 1.
				Transcript
					show: count - spaces;
					cr ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4D' '5C' '7H' '12H' '13S')
		temp: 	an OrderedCollection()
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		dataInHand: 	a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13...etc...
		count: 	2
		suitStreak: 	an OrderedCollection()
		max: 	0
		word: 	''
		spaces: 	1
		aKey: 	$S
		aValue: 	' 13S
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4D' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
count := 1.
spaces := 0.
word := ''.
aValue
	do: [ :...etc...
		assoc: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	$S->' 13S
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}


Array(SequenceableCollection)>>do:
	Receiver: {$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' 7H 12H'}

Dictionary>>associationsDo:
	Receiver: a Dictionary($C->' 1C 2C 3C 4C 5C' $D->' 4D' $H->' 7H 12H' $S->' 13S' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{$S->' 13S'. nil. $C->' 1C 2C 3C 4C 5C'. $D->' 4D'. $H->' THERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 8:34:36.435546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	nil
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
		temp: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	niTHERE_BE_DRAGONS_HERE
KeyNotFound: key $C not found in Dictionary
30 January 2021 8:35:15.230546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		aKey: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$C
		aBlock: 	[ self errorKeyNotFound: key 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Dictionary>>at:
	Receiver: a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
	Arguments and temporary variables: 
		key: 	$
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->''. nil. 'S'->''. 'C'->''. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	nil
		suitStreak: 	an OrderedCollection()
		max: 	nil
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'1C'
		current: 	$C
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'' 'D'->'' 'H'->'' 'S'->'' )
		temp: 	nil
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@183)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(409742080))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	839505
		lastStepMessage: 	nil
		lastCycleTime: 	839528
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	839505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:35:59.811546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $7
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$7

Character(Object)>>errorNotIndexable
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

Character(Object)>>size
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$7
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' '
	ifTrue: [ word , a ]
	ifFalse: [ temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		aKey: 	'H'
		aValue: 	'7H 12H '
		a: 	$7
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: '7H 12H '
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' '
	ifTrue: [ word , a ]
	ifFalse: [ temp add: word.
		wo...etc...
		index: 	
	Receiver's instance variables: 
'7H 12H '

[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	'H'
		aValue: 	'7H 12H 
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc...
		assoc: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	ATHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:37:43.770546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $7
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$7

Character(Object)>>errorNotIndexable
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

Character(Object)>>size
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$7
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' '
	ifTrue: [ word , a.
		Transcript
			show: temp;
			cr ]
	ifFalse: [ temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ word , a.
				Transcript
					show: temp;
					cr ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		aKey: 	'H'
		aValue: 	'7H 12H '
		a: 	$7
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: '7H 12H '
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' '
	ifTrue: [ word , a.
		Transcript
			show: temp;
			cr...etc...
		index: 	
	Receiver's instance variables: 
'7H 12H '

[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ word , a.
				Transcript
					show: temp;
					cr ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	'H'
		aValue: 	'7H 12H 
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc...
		assoc: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Array(SequenceableCollection)>>do:
	Receiver: {'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}

Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection(
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:38:28.561546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $7
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$7

Character(Object)>>errorNotIndexable
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

Character(Object)>>size
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$7
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' '
	ifTrue: [ Transcript
			show: word , a;
			cr.
		word , a ]
	ifFalse: [ temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ Transcript
					show: word , a;
					cr.
				word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		aKey: 	'H'
		aValue: 	'7H 12H '
		a: 	$7
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: '7H 12H '
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' '
	ifTrue: [ Transcript
			show: word , a;
			cr.
		word...etc...
		index: 	
	Receiver's instance variables: 
'7H 12H '

[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ Transcript
					show: word , a;
					cr.
				word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	'H'
		aValue: 	'7H 12H 
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc...
		assoc: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Array(SequenceableCollection)>>do:
	Receiver: {'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}

Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection(
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
30 January 2021 8:39:43.031546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $7
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$7

Character(Object)>>errorNotIndexable
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

Character(Object)>>size
	Receiver: $7
	Arguments and temporary variables: 

	Receiver's instance variables: 
$7

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: ''
	Arguments and temporary variables: 
		start: 	1
		stop: 	0
		replacementCollection: 	$7
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
''

ByteString(SequenceableCollection)>>,
	Receiver: ''
	Arguments and temporary variables: 
		otherCollection: 	$
	Receiver's instance variables: 
''

[ :a | 
a ~= ' '
	ifTrue: [ Transcript
			show: word , a asString;
			cr.
		word , a ]
	ifFalse: [ temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ Transcript
					show: word , a asString;
					cr.
				word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		aKey: 	'H'
		aValue: 	'7H 12H '
		a: 	$7
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: '7H 12H '
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' '
	ifTrue: [ Transcript
			show: word , a asString;
			c...etc...
		index: 	
	Receiver's instance variables: 
'7H 12H '

[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue: [ Transcript
					show: word , a asString;
					cr.
				word , a ]
			ifFalse: [ temp add: word.
				word := '' ] ].
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	'H'
		aValue: 	'7H 12H 
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc...
		assoc: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Array(SequenceableCollection)>>do:
	Receiver: {'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}

Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' '
			ifTrue...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection(
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #asCharacter
30 January 2021 8:42:53.977546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #asCharacter
	Receiver: ' '
	Arguments and temporary variables: 
		aMessage: 	asCharacter
		exception: 	MessageNotUnderstood: ByteString>> #asCharacter
		resumeValue: 	ni
	Receiver's instance variables: 
' '

[ :a | 
a ~= ' ' asCharacter
	ifTrue: [ Transcript
			show: a;
			cr.
		word := word , a asString ]
	ifFalse: [ temp add: word.
		word := '' ] ] in [ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' asCharacter
			ifTrue: [ Transcript
					show: a;
					cr.
				word := word , a asString ]
			ifFalse: [ temp add: word.
				word := '' ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		aKey: 	'H'
		aValue: 	'7H 12H '
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		a: 	$
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


ByteString(SequenceableCollection)>>do:
	Receiver: '7H 12H '
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
a ~= ' ' asCharacter
	ifTrue: [ Transcript
			show: a;
			cr.
	...etc...
		index: 	
	Receiver's instance variables: 
'7H 12H '

[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' asCharacter
			ifTrue: [ Transcript
					show: a;
					cr.
				word := word , a asString ]
			ifFalse: [ temp add: word.
				word := '' ] ].
Transcript
	show: temp;
	cr.
temp size > max
	ifTrue: [ max := temp size.
		suitStreak := temp ] ] in Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection()
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		aKey: 	'H'
		aValue: 	'7H 12H 
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' asCharact...etc...
		assoc: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'H'->'7H 12H 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Array(SequenceableCollection)>>do:
	Receiver: {'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	
	Receiver's instance variables: 
{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}

Dictionary>>associationsDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->'13S ' )
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
word := ''.
aValue
	do: [ :a | 
		a ~= ' ' asCharact...etc..
	Receiver's instance variables: 
		tally: 	4
		array: 	{'H'->'7H 12H '. nil. 'S'->'13S '. 'C'->'1C 2C 3C 4C 4C 5C '. 'D'->''}


Poker>>getHighestSuitStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		word: 	''
		suitStreak: 	an OrderedCollection()
		max: 	0
		streaks: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		previousCard: 	nil
		previous: 	nil
		card: 	'13S'
		current: 	$S
		highestSuitStreak: 	nil
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('C'->'1C 2C 3C 4C 4C 5C ' 'D'->'' 'H'->'7H 12H ' 'S'->...etc...
		temp: 	an OrderedCollection(
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 5 4 2 38 3 33 4 52)
		sorted: 	#('1C' '2C' '3C' '4C' '4C' '5C' '7H' '12H' '13S')
		data: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	an OrderedCollection('4C' '4C')
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '5C' '4C' '2C' '12H' '3C' '7H' '4C' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:20:55.456546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
13

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	13
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '2D' '3H' '4S' '5C' '6C' '12C' '13S' '13S')
		previousCard: 	'13S'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13S' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	13
		maxCount: 	0
		valueStreak: 	an OrderedCollection()
		aKey: 	'13'
		aValue: 	an OrderedCollection('13S' '13S'
	Receiver's instance variables: 
		hand: 	#('1C' '2D' '3H' '4S' '5C' '6C' '12C' '13S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13S' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13S' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13S' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13S' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13S' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: aTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 5
30 January 2021 9:22:35.154546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #('C' 'D' 'H' 'S')
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#('C' 'D' 'H' 'S')

Array(Object)>>at:
	Receiver: #('C' 'D' 'H' 'S')
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#('C' 'D' 'H' 'S')

Poker>>convert:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 15 29 43 53 6 12 51 52)
		temp: 	5
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'1'
		val: 	53
		i: 	
	Receiver's instance variables: 
		hand: 	#('1C' '2D' '3H' '4S' nil nil nil nil nil)


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 15 29 43 53 6 12 51 52)
		sorted: 	nil
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	nil
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('1C' '2D' '3H' '4S' nil nil nil nil nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:30:46.670546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRuTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:32:44.185546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
	THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:33:33.243546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RuTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:34:43.723546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuATHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:40:52.280546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMoTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:43:19.686546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary vaTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:44:50.454546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		Transcript
			show: aValue;
			cr.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:45:21.876546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue.
		Transcript
			show: aValue;
			cr ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RuTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:45:48.169546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue.
		Transcript
			show: valueStreak;
			cr ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:46:24.053546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue.
		Transcript
			show: valueStreak;
			cr ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
30 January 2021 9:47:45.388546 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 12
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
12

ByteString(String)>>compare:with:collated:
	Receiver: '13'
	Arguments and temporary variables: 
		string1: 	'13'
		string2: 	12
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'13'

ByteString(String)>>>
	Receiver: '13'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'13'

[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue size >= maxCount))
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue.
		Transcript
			show: valueStreak;
			cr ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	nil
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		aKey: 	'13'
		aValue: 	an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc...
		assoc: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'13'->an OrderedCollection('13C' '13S'
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an OrderedCollection()...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value 
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedCollection() 2->an Order...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
aValue size > maxCount | (aKey > maxVal & (aValue si...etc..
	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(nil 1->an OrderedCollection() 2->an OrderedCollection() 3->an O...etc...


Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		maxVal: 	12
		maxCount: 	2
		valueStreak: 	an OrderedCollection('12C' '12D')
		streaks: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		previousCard: 	'13C'
		previous: 	'13'
		card: 	'13S'
		current: 	'13'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('13'->an OrderedCollection('13C' '13S') 1->an OrderedC...etc...
		highestValueStreak: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(12 25 4 17 1 33 13 50 52)
		sorted: 	#('1C' '4C' '4D' '7H' '11S' '12C' '12D' '13C' '13S')
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('12C' '12D' '4C' '4D' '1C' '7H' '13C' '11S' '13S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		answer: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker answer |
	Transcript
		show: answer;
		clear.
	poker := Poke...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (512@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubCursor(606164224) a RubPrimarySelectionMorph(788078336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 9
31 January 2021 12:04:36.490003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(4 4 1 1 3 3 13 13)
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#(4 4 1 1 3 3 13 13)

Array(Object)>>at:
	Receiver: #(4 4 1 1 3 3 13 13)
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
#(4 4 1 1 3 3 13 13)

Poker>>convert:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13)
		temp: 	1
		values: 	#('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13')
		suits: 	#('C' 'D' 'H' 'S')
		output: 	'13C'
		val: 	13
		i: 	
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' nil)


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13)
		sorted: 	nil
		data: 	nil
		remaining: 	nil
		temp: 	nil
		straight: 	nil
		flushOrSuitStreak: 	nil
		straightFlush: 	nil
		valueStreak: 	nil
		valueStreak2: 	nil
		maxNumOfAKind: 	nil
		suitOfAKind: 	nil
		suitCards: 	ni
	Receiver's instance variables: 
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' nil)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
InvalidSlotName: hand,hand2 is an invalid name for a slot
31 January 2021 12:10:57.440003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

InstanceVariableSlot class(Slot class)>>checkValidName:
	Receiver: InstanceVariableSlot
	Arguments and temporary variables: 
		aSymbol: 	#'hand,hand2
	Receiver's instance variables: 
		superclass: 	IndexedSlot
		methodDict: 	a MethodDictionary(#asRingMinimalDefinitionIn:->InstanceVariableSlo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AbstractInitializedSlot. AccessorInstanceVariableSlot. BaseSlot. R...etc...
		name: 	#InstanceVariableSlot
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Variables'
		slotClassDefinition: 	nil


InstanceVariableSlot class(Slot class)>>named:
	Receiver: InstanceVariableSlot
	Arguments and temporary variables: 
		aSymbol: 	#'hand,hand2
	Receiver's instance variables: 
		superclass: 	IndexedSlot
		methodDict: 	a MethodDictionary(#asRingMinimalDefinitionIn:->InstanceVariableSlo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AbstractInitializedSlot. AccessorInstanceVariableSlot. BaseSlot. R...etc...
		name: 	#InstanceVariableSlot
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Variables'
		slotClassDefinition: 	nil


ByteSymbol(Symbol)>>asSlot
	Receiver: #'hand,hand2'
	Arguments and temporary variables: 

	Receiver's instance variables: 
#'hand,hand2'

ByteString(String)>>asSlot
	Receiver: 'hand,hand2'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'hand,hand2'

[ :substring | substring asSlot ] in ByteString(String)>>asSlotCollection
	Receiver: 'hand,hand2'
	Arguments and temporary variables: 
		whitespaces: 	' 	
'
		substring: 	'hand,hand2
	Receiver's instance variables: 
'hand,hand2'

Array(SequenceableCollection)>>collect:
	Receiver: #('hand,hand2')
	Arguments and temporary variables: 
		aBlock: 	[ :substring | substring asSlot ]
		newCollection: 	#(nil)
		index: 	
	Receiver's instance variables: 
#('hand,hand2')

ByteString(String)>>asSlotCollection
	Receiver: 'hand,hand2'
	Arguments and temporary variables: 
		whitespaces: 	' 	

	Receiver's instance variables: 
'hand,hand2'

[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment ] in Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 8
31 January 2021 1:31:40.838003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SortedCollection(Object)>>errorSubscriptBounds:
	Receiver: a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil '13C' '13C' '1C' '3C' '3C' '4C' '5C')
		firstIndex: 	4
		lastIndex: 	10
		sortBlock: 	nil


SortedCollection(OrderedCollection)>>at:
	Receiver: a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#add: was sent to nil
31 January 2021 1:32:53.517003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	add: '3C'
		exception: 	MessageNotUnderstood: receiver of "add:" is nil
		resumeValue: 	ni
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	add: '3C'
		exception: 	nil
		resumeValue: 	nil
		node: 	ni
	Receiver's instance variables: 
nil

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	nil
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#add: was sent to nil
31 January 2021 1:41:01.497003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	add: '3C'
		exception: 	MessageNotUnderstood: receiver of "add:" is nil
		resumeValue: 	ni
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	add: '3C'
		exception: 	nil
		resumeValue: 	nil
		node: 	ni
	Receiver's instance variables: 
nil

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	nil
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:42:19.454003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13CTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:43:45.239003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:44:24.140003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
	THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:44:49.089003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(60616THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:46:06.197003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:46:29.730003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(558471680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(217@432)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:46:48.634003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:49:09.807003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	ColTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:52:15.611003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717133824))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(158@361)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:57:02.321003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(60278784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(182@414)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEdiTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:57:39.796003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(556974080))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(182@414)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 1:58:23.976003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(Collection)>>max
	Receiver: an OrderedCollection('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#('3C' '3C' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1005691904))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(229@290)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #value:
31 January 2021 2:00:50.215003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #value:
	Receiver: '3C'
	Arguments and temporary variables: 
		aMessage: 	value: $3
		exception: 	MessageNotUnderstood: ByteString>> #value:
		resumeValue: 	ni
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>max:
	Receiver: '3C'
	Arguments and temporary variables: 
		max: 	nil
		aBlock: 	'3C
	Receiver's instance variables: 
'3C'

[ :max :each | max max: each ] in Array(Collection)>>max
	Receiver: #('3C' '3C')
	Arguments and temporary variables: 
		max: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
#('3C' '3C')

[ :each | nextValue := binaryBlock value: nextValue value: each ] in Array(Collection)>>inject:into:
	Receiver: #('3C' '3C')
	Arguments and temporary variables: 
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each ]
		nextValue: 	'3C'
		each: 	'3C
	Receiver's instance variables: 
#('3C' '3C')

Array(SequenceableCollection)>>do:
	Receiver: #('3C' '3C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
#('3C' '3C')

Array(Collection)>>inject:into:
	Receiver: #('3C' '3C')
	Arguments and temporary variables: 
		nextValue: 	'3C'
		thisValue: 	'3C'
		binaryBlock: 	[ :max :each | max max: each 
	Receiver's instance variables: 
#('3C' '3C')

Array(Collection)>>max
	Receiver: #('3C' '3C')
	Arguments and temporary variables: 

	Receiver's instance variables: 
#('3C' '3C')

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScTHERE_BE_DRAGONS_HERE
Instance of False did not understand #asNumber
31 January 2021 2:07:13.762003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #asNumber
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	asNumber
		exception: 	MessageNotUnderstood: False>> #asNumber
		resumeValue: 	ni
	Receiver's instance variables: 
false

[ :a :c | a asNumber > c asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	false
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a asNumber > c asNumber ]
		nextValue: 	false
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	false
		thisValue: 	0
		binaryBlock: 	[ :a :c | a asNumber > c asNumber 
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(234666496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(157@419)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		tTHERE_BE_DRAGONS_HERE
Instance of Character did not understand #adaptToNumber:andSend:
31 January 2021 2:08:31.691003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: $3
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 0 andSend: #>
		exception: 	MessageNotUnderstood: Character>> #adaptToNumber:andSend:
		resumeValue: 	ni
	Receiver's instance variables: 
$3

Character(Object)>>adaptToInteger:andSend:
	Receiver: $3
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
$3

Character(Object)>>adaptToInteger:andCompare:
	Receiver: $3
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
$3

SmallInteger(Integer)>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	$
	Receiver's instance variables: 
0

SmallInteger>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	$
	Receiver's instance variables: 
0

[ :element | rcvr perform: selector with: element ] in ByteString(Collection)>>adaptToNumber:andSend:
	Receiver: '3C'
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#>
		element: 	$
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>collect:
	Receiver: '3C'
	Arguments and temporary variables: 
		aBlock: 	[ :element | rcvr perform: selector with: element ]
THERE_BE_DRAGONS_HERE
Instance of Character did not understand #adaptToNumber:andSend:
31 January 2021 2:08:53.022003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: $3
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 0 andSend: #>
		exception: 	MessageNotUnderstood: Character>> #adaptToNumber:andSend:
		resumeValue: 	ni
	Receiver's instance variables: 
$3

Character(Object)>>adaptToInteger:andSend:
	Receiver: $3
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
$3

Character(Object)>>adaptToInteger:andCompare:
	Receiver: $3
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
$3

SmallInteger(Integer)>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	$
	Receiver's instance variables: 
0

SmallInteger>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	$
	Receiver's instance variables: 
0

[ :element | rcvr perform: selector with: element ] in ByteString(Collection)>>adaptToNumber:andSend:
	Receiver: '3C'
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#>
		element: 	$
	Receiver's instance variables: 
'3C'

ByteString(SequenceableCollection)>>collect:
	Receiver: '3C'
	Arguments and temporary variables: 
		aBlock: 	[ :element | rcvr perform: selector with: element ]
		newCollection: 	'  '
		index: 	
	Receiver's instance variables: 
'3C'

ByteString(Collection)>>adaptToNumber:andSend:
	Receiver: '3C'
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
'3C'

ByteString(Object)>>adaptToInteger:andSend:
	Receiver: '3C'
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
'3C'

ByteString(Object)>>adaptToInteger:andCompare:
	Receiver: '3C'
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#
	Receiver's instance variables: 
'3C'

SmallInteger(Integer)>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	'3C
	Receiver's instance variables: 
0

SmallInteger>>>
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	'3C
	Receiver's instance variables: 
0

[ :a :c | a > c ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a > c ]
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a > c 
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScrTHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:10:32.998003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	'3C'
		l2_max: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditoTHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:14:36.388003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	'3C'
		l2_max: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(914220032))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(157@409)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queueTHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:16:09.768003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	'3C'
		l2_max: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(920977408))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(157@409)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13103107
		lastStepMessage: 	nil
		lastCycleTime: 	13103174
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13103107
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:20:18.874003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :a :c | 
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom:...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom:...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:22:29.907003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :a :c | 
Transcript
	show: a;
	cr.
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: a;
	cr.
(a copyFrom: 1 to: a size - 1...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: a;
	cr.
(a copyFrom: 1 to: a size - 1...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1359165THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:22:50.645003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMoTHERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:23:03.416003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: c;
	cr.
(a copyFrom: 1 to: a size - 1...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(60616THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:23:14.833003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

[ :a :c | 
Transcript
	show: 'h' , c;
	cr.
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: 'h' , c;
	cr.
(a copyFrom: 1 to: a si...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: 'h' , c;
	cr.
(a copyFrom: 1 to: a si...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecTHERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
31 January 2021 2:23:25.272003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'h'
	Arguments and temporary variables: 
		start: 	2
		stop: 	1
		replacementCollection: 	0
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	ni
	Receiver's instance variables: 
'h'

ByteString(SequenceableCollection)>>,
	Receiver: 'h'
	Arguments and temporary variables: 
		otherCollection: 	
	Receiver's instance variables: 
'h'

[ :a :c | 
Transcript
	show: 'h' , a;
	cr.
(a copyFrom: 1 to: a size - 1) asNumber
	> (c copyFrom: 1 to: c size - 1) asNumber
	ifTrue: [ a copyFrom: 1 to: (a size - 1) asNumber ]
	ifFalse: [ (c copyFrom: 1 to: c size - 1) asNumber ] ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		a: 	0
		c: 	'3C
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: 'h' , a;
	cr.
(a copyFrom: 1 to: a si...etc...
		nextValue: 	0
		each: 	'3C
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection>>do:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | 
Transcript
	show: 'h' , a;
	cr.
(a copyFrom: 1 to: a si...etc..
	Receiver's instance variables: 
		array: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C' nil nil nil)
		firstIndex: 	1
		lastIndex: 	7


Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	4
		l1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		l2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		result: 	nil
		l1_max: 	0
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	nil
		temp2: 	nil
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	nil
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	nil
		valueStreak2b: 	nil
		remaining1: 	nil
		remaining2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph teTHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:26:09.481003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(385417216))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13702821
		lastStepMessage: 	nil
		lastCycleTime: 	13702884
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13702821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: THERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:26:41.264003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(520978944))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13734647
		lastStepMessage: 	nil
		lastCycleTime: 	13734673
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13734647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
	THERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:27:06.567003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(834742784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13759905
		lastStepMessage: 	nil
		lastCycleTime: 	13759971
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13759905
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtensionTHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:27:55.832003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(410264576))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13809166
		lastStepMessage: 	nil
		lastCycleTime: 	13809235
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13809166
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7THERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:29:08.393003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(240753664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13881761
		lastStepMessage: 	nil
		lastCycleTime: 	13881801
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13881761
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphETHERE_BE_DRAGONS_HERE
Instance of False did not understand #bitOr:
31 January 2021 2:36:48.707003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

False(Object)>>doesNotUnderstand: #bitOr:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	bitOr: 1
		exception: 	MessageNotUnderstood: False>> #bitOr:
		resumeValue: 	ni
	Receiver's instance variables: 
false

SmallInteger>>bitOr:
	Receiver: 1
	Arguments and temporary variables: 
		arg: 	fals
	Receiver's instance variables: 
1

SmallInteger(Integer)>>|
	Receiver: 1
	Arguments and temporary variables: 
		anInteger: 	fals
	Receiver's instance variables: 
1

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	2
		l1: 	an OrderedCollection('3C' '3C')
		l2: 	an OrderedCollection('3C' '3C')
		result: 	an OrderedCollection()
		l1_max: 	3
		l2_max: 	3
		ace1: 	0
		ace2: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C'
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(978466816))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210@452)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	14342045
		lastStepMessage: 	nil
		lastCycleTime: 	14342113
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	14342045
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:08:33.884003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:09:51.784003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(123137536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(193@365)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:11:39.097003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(895221760))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(231@257)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	16432486
		lastStepMessage: 	nil
		lastCycleTime: 	16432511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	16432486
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:13:07.776003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(524009472))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(231@257)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	16521122
		lastStepMessage: 	nil
		lastCycleTime: 	16521185
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	16521122
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:14:06.723003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(952089088))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(231@257)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	16580047
		lastStepMessage: 	nil
		lastCycleTime: 	16580126
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	16580047
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldStTHERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #add:
31 January 2021 3:14:26.568003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection class(Object)>>doesNotUnderstand: #add:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	add: '4C'
		exception: 	MessageNotUnderstood: OrderedCollection class>> #add:
		resumeValue: 	ni
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 4 1 1 3 3 13 13 5)
		hand: 	#('4C' '4C' '1C' '1C' '3C' '3C' '13C' '13C' '5C')
		sorted: 	nil
		sorted1: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		sorted2: 	#('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		data: 	nil
		temp1: 	an OrderedCollection('3C' '3C')
		temp2: 	an OrderedCollection('3C' '3C')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('13C' '13C')
		valueStreak2: 	an OrderedCollection('13C' '13C')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '3C' '4C' '5C' '13C' '13C' '1C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	an OrderedCollection('3C' '3C')
		valueStreak1b: 	an OrderedCollection('3C' '3C')
		valueStreak2b: 	an OrderedCollection('3C' '3C')
		remaining1: 	#('3C' '3C' '4C' '5C' '1C')
		remaining2: 	#('3C' '3C' '4C' '5C' '1C')
		flush: 	OrderedCollection
		i: 	
	Receiver's instance variables: 
		hand1: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')
		hand2: 	a SortedCollection('13C' '13C' '1C' '3C' '3C' '4C' '5C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(583931392))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(231@257)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	16599912
		lastStepMessage: 	nil
		lastCycleTime: 	16599972
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	16599912
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@8THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:41:11.930003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:44:25.074003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(656089088))
		getMenuPolicy: 	nil
		mouseDowTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:44:58.053003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(60612096))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(2@352)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:45:33.491003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(846929920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(24@280)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) namTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:45:56.218003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPTHERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:48:01.454003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(652551680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(15@485)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	22214848
		lastStepMessage: 	nil
		lastCycleTime: 	22214868
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	22214848
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:48:39.877003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '4D' '4H')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '4D' '4H')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(915898880))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(0@493)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	22253268
		lastStepMessage: 	nil
		lastCycleTime: 	22253291
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	22253268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.86119257086THERE_BE_DRAGONS_HERE
Instance of True did not understand #>
31 January 2021 4:55:19.042003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True(Object)>>doesNotUnderstand: #>
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	> 0
		exception: 	MessageNotUnderstood: True>> #>
		resumeValue: 	ni
	Receiver's instance variables: 
true

[ :aKey :aValue | 
(aKey asNumber ~= 1 & (aKey asNumber > maxVal asNumber)
	| (aKey asNumber == 1) & (aValue size == maxCount) | aValue size)
	> maxCount
	ifTrue: [ maxCount := aValue size.
		maxVal := aKey.
		valueStreak := aValue ] ] in Poker>>getHighestValueStreak:
	Receiver: a Poker
	Arguments and temporary variables: 
		streaks: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		previousCard: 	'12D'
		previous: 	'12'
		card: 	'12S'
		current: 	'12'
		newList: 	an OrderedCollection()
		dataInHand: 	a Dictionary('12'->an OrderedCollection('12C' '12D' '12S') 1->an Or...etc...
		highestValueStreak: 	nil
		maxVal: 	0
		maxCount: 	0
		valueStreak: 	an OrderedCollection()
		aKey: 	1
		aValue: 	an OrderedCollection(
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary('12'->an OrderedCollection('12C' '12D' '12S') 1->an OrderedCollection() 2->an...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aKey :aValue | 
(aKey asNumber ~= 1 & (aKey asNumber > maxVal asNumb...etc...
		assoc: 	1->an OrderedCollection(
	Receiver's instance variables: 
		tally: 	14
		array: 	THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
31 January 2021 4:55:53.130003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OrderedCollection>>copyReplaceFrom:to:with:
	Receiver: an OrderedCollection('12C' '12D' '12S' '13H' '13S')
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	nil
		newOrderedCollection: 	nil
		delta: 	0
		startIndex: 	6
		stopIndex: 	
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '13H' '13S')
		firstIndex: 	1
		lastIndex: 	5


OrderedCollection(SequenceableCollection)>>,
	Receiver: an OrderedCollection('12C' '12D' '12S' '13H' '13S')
	Arguments and temporary variables: 
		otherCollection: 	ni
	Receiver's instance variables: 
		array: 	#('12C' '12D' '12S' '13H' '13S')
		firstIndex: 	1
		lastIndex: 	5


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		valueStreak1: 	an OrderedCollection('12C' '12D' '12S' '4D' '4H')
		valueStreak2: 	an OrderedCollection('12C' '12D' '12S' '13H' '13S')
		shuf: 	#(17 39 30 52 44 25 41 51 12)
		hand: 	#('4D' '13H' '4H' '13S' '5S' '12D' '2S' '12S' '12C')
		sorted: 	nil
		sorted1: 	#('2S' '4D' '4H' '5S' '12C' '12D' '12S')
		sorted2: 	#('2S' '5S' '12C' '12D' '12S' '13H' '13S')
		data: 	nil
		temp1: 	an OrderedCollection('4D' '4H')
		temp2: 	an OrderedCollection('13H' '13S')
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '12S' '13H' '13S')
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('2S' '5S' '12S')
		flushOrSuitStreak2: 	an OrderedCollection('2S' '5S' '12S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('4D' '4H')
		valueStreak2b: 	an OrderedCollection('13H' '13S')
		remaining1: 	#('2S' '4D' '4H' '5S')
		remaining2: 	#('2S' '5S' '13H' '13S')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '12S' '2S' '4D' '4H' '5S')
		hand2: 	a SortedCollection('12C' '12D' '12S' '13H' '13S' '2S' '5S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(952396288))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(20@483)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	22686514
		lastStepMessage: 	nil
		lastCycleTime: 	22686547
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	22686514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1440@837)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@837)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1440@837)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroTHERE_BE_DRAGONS_HERE
#isNotEmpty was sent to nil
31 January 2021 5:04:23.402003 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #isNotEmpty
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isNotEmpty
		exception: 	MessageNotUnderstood: receiver of "isNotEmpty" is nil
		resumeValue: 	ni
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #isNotEmpty
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isNotEmpty
		exception: 	nil
		resumeValue: 	nil
		node: 	ni
	Receiver's instance variables: 
nil

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	5
		l1: 	nil
		l2: 	nil
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('10S' '11C' '11S' '3C' '6S' '9C' '9S')
		hand2: 	a SortedCollection('10S' '11S' '12D' '13H' '3C' '6S' '9S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(11 25 9 39 50 48 3 49 45)
		hand: 	#('11C' '12D' '9C' '13H' '11S' '9S' '3C' '10S' '6S')
		sorted: 	nil
		sorted1: 	#('3C' '6S' '9C' '9S' '10S' '11C' '11S')
		sorted2: 	#('3C' '6S' '9S' '10S' '11S' '12D' '13H')
		data: 	nil
		temp1: 	an OrderedCollection('9C' '9S')
		temp2: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection('9S' '10S' '11S' '12D' '13H')
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('11C' '11S')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	nil
		flushOrSuitStreak1: 	an OrderedCollection('6S' '9S' '10S' '11S')
		flushOrSuitStreak2: 	an OrderedCollection('6S' '9S' '10S' '11S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection('9C' '9S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('3C' '6S' '9C' '9S' '10S')
		remaining2: 	#('3C' '6S' '9S' '10S' '11S' '12D' '13H')
		flush: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('10S' '11C' '11S' '3C' '6S' '9C' '9S')
		hand2: 	a SortedCollection('10S' '11S' '12D' '13H' '3C' '6S' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(135916544) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(990745088))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(6@333)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 8:58:37.059875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 8:59:23.651875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:00:07.243875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:01:30.833875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:03:39.027875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:04:27.590875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:05:02.282875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubETHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:05:25.310875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1046100992))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(19@438)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instanceTHERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:06:37.388875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
11 February 2021 9:09:34.179875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Character(Object)>>error:
	Receiver: $1
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable
	Receiver's instance variables: 
$1

Character(Object)>>errorNotIndexable
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

Character(Object)>>size
	Receiver: $1
	Arguments and temporary variables: 

	Receiver's instance variables: 
$1

[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ] in Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	nil
		a: 	0
		c: 	$
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


[ :each | nextValue := binaryBlock value: nextValue value: each ] in ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber ]
		nextValue: 	0
		each: 	$
	Receiver's instance variables: 
'1C'

ByteString(SequenceableCollection)>>do:
	Receiver: '1C'
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	
	Receiver's instance variables: 
'1C'

ByteString(Collection)>>inject:into:
	Receiver: '1C'
	Arguments and temporary variables: 
		nextValue: 	0
		thisValue: 	0
		binaryBlock: 	[ :a :c | a max: (c copyFrom: 1 to: c size - 1) asNumber 
	Receiver's instance variables: 
'1C'

Poker>>sizeCheck:firstList:secondList:
	Receiver: a Poker
	Arguments and temporary variables: 
		givenSize: 	1
		l1: 	'1C'
		l2: 	'1D'
		result: 	nil
		l1_max: 	0
		l2_max: 	0
		aceInl1: 	nil
		aceInl2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(60616422THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
11 February 2021 9:15:05.378875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: '1C'
	Arguments and temporary variables: 
		string1: 	'1C'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'1C'

ByteString(String)>><
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	
	Receiver's instance variables: 
'1C'

SortedCollection(OrderedCollection)>>at:
	Receiver: a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
	Arguments and temporary variables: 
		anInteger: 	'1C'
		index: 	ni
	Receiver's instance variables: 
		array: 	#(nil nil nil '11D' '1C' '2C' '3C' '4C' '6H' '8S')
		firstIndex: 	4
		lastIndex: 	10
		sortBlock: 	nil


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
11 February 2021 9:19:41.831875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: '1C'
	Arguments and temporary variables: 
		string1: 	'1C'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'1C'

ByteString(String)>><
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	
	Receiver's instance variables: 
'1C'

SortedCollection(OrderedCollection)>>at:
	Receiver: a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
	Arguments and temporary variables: 
		anInteger: 	'1C'
		index: 	ni
	Receiver's instance variables: 
		array: 	#(nil nil nil '11D' '1C' '2C' '3C' '4C' '6H' '8S')
		firstIndex: 	4
		lastIndex: 	10
		sortBlock: 	nil


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(918997504))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(10@275)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
11 February 2021 9:21:26.201875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: '1C'
	Arguments and temporary variables: 
		string1: 	'1C'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'1C'

ByteString(String)>><
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	
	Receiver's instance variables: 
'1C'

SortedCollection(OrderedCollection)>>at:
	Receiver: a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
	Arguments and temporary variables: 
		anInteger: 	'1C'
		index: 	ni
	Receiver's instance variables: 
		array: 	#(nil nil nil '11D' '1C' '2C' '3C' '4C' '6H' '8S')
		firstIndex: 	4
		lastIndex: 	10
		sortBlock: 	nil


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an AnnounceTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
11 February 2021 9:21:49.822875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>> #isByteString
		resumeValue: 	ni
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: '1C'
	Arguments and temporary variables: 
		string1: 	'1C'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc..
	Receiver's instance variables: 
'1C'

ByteString(String)>><
	Receiver: '1C'
	Arguments and temporary variables: 
		aString: 	
	Receiver's instance variables: 
'1C'

SortedCollection(OrderedCollection)>>at:
	Receiver: a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
	Arguments and temporary variables: 
		anInteger: 	'1C'
		index: 	ni
	Receiver's instance variables: 
		array: 	#(nil nil nil '11D' '1C' '2C' '3C' '4C' '6H' '8S')
		firstIndex: 	4
		lastIndex: 	10
		sortBlock: 	nil


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(1 13 2 14 3 24 4 47 32)
		hand: 	#('1C' '13C' '2C' '1D' '3C' '11D' '4C' '8S' '6H')
		sorted: 	an OrderedCollection()
		sorted1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		sorted2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		data: 	nil
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection()
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2C' '3C' '4C' '1C')
		flushOrSuitStreak2: 	an OrderedCollection('3C' '4C' '13C')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreakb: 	nil
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2C' '3C' '4C' '6H' '8S' '11D' '1C')
		remaining2: 	#('3C' '4C' '6H' '8S' '11D' '13C' '1D')
		flush: 	an OrderedCollection()
		ace1: 	'1C'
		ace2: 	'1D
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '1C' '2C' '3C' '4C' '6H' '8S')
		hand2: 	a SortedCollection('11D' '13C' '1D' '3C' '4C' '6H' '8S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@240)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(263982080) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(425691136))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(22@478)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder:THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
11 February 2021 11:02:07.752875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>error:
	Receiver: 'here     '
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object
	Receiver's instance variables: 
'here     '

ByteString(Object)>>errorImproperStore
	Receiver: 'here     '
	Arguments and temporary variables: 

	Receiver's instance variables: 
'here     '

ByteString>>at:put:
	Receiver: 'here     '
	Arguments and temporary variables: 
		index: 	6
		aCharacter: 	'12C
	Receiver's instance variables: 
'here     '

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: 'here     '
	Arguments and temporary variables: 
		start: 	6
		stop: 	9
		replacement: 	an OrderedCollection('12C' '12D' '4C' '4D')
		repStart: 	1
		index: 	6
		repOff: 	-
	Receiver's instance variables: 
'here     '

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: 'here     '
	Arguments and temporary variables: 
		start: 	6
		stop: 	9
		replacement: 	an OrderedCollection('12C' '12D' '4C' '4D')
		repStart: 	
	Receiver's instance variables: 
'here     '

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: 'here     '
	Arguments and temporary variables: 
		start: 	6
		stop: 	9
		replacement: 	an OrderedCollection('12C' '12D' '4C' '4D')
		repStart: 	
	Receiver's instance variables: 
'here     '

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'here '
	Arguments and temporary variables: 
		start: 	6
		stop: 	5
		replacementCollection: 	an OrderedCollection('12C' '12D' '4C' '4D')
		newSequenceableCollection: 	'here     '
		newSize: 	9
		endReplacement: 	
	Receiver's instance variables: 
'here '

ByteString(SequenceableCollection)>>,
	Receiver: 'here '
	Arguments and temporary variables: 
		otherCollection: 	an OrderedCollection('12C' '12D' '4C' '4D'
	Receiver's instance variables: 
'here '

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(4 21 47 42 12 29 25 7 17)
		hand: 	#('4C' '8D' '8S' '3S' '12C' '3H' '12D' '7C' '4D')
		sorted: 	nil
		sorted1: 	#('3H' '4C' '4D' '7C' '8S' '12C' '12D')
		sorted2: 	#('3H' '3S' '4D' '7C' '8D' '12C' '12D')
		temp1: 	an OrderedCollection('4C' '4D')
		temp2: 	an OrderedCollection('3H' '3S')
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection('12C' '12D' '4C' '4D')
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('12C' '12D')
		valueStreak2: 	an OrderedCollection('12C' '12D')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('4C' '7C' '12C')
		flushOrSuitStreak2: 	an OrderedCollection('4D' '8D' '12D')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('4C' '4D')
		valueStreak2b: 	an OrderedCollection('3H' '3S')
		remaining1: 	#('3H' '4C' '4D' '7C' '8S')
		remaining2: 	#('3H' '3S' '4D' '7C' '8D')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('12C' '12D' '3H' '4C' '4D' '7C' '8S')
		hand2: 	a SortedCollection('12C' '12D' '3H' '3S' '4D' '7C' '8D')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:04:14.335875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(42366464))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(37051724THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:05:28.297875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(374844928))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(1@324)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9726698
		lastStepMessage: 	nil
		lastCycleTime: 	9726764
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9726698
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		bordeTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:05:58.385875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(245738496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(107@403)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9756820
		lastStepMessage: 	nil
		lastCycleTime: 	9756850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9756820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorTHERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:06:25.697875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(141587456))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(53@242)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9784117
		lastStepMessage: 	nil
		lastCycleTime: 	9784161
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9784117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.722385141THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:08:00.475875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(352148480))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(16@241)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9878902
		lastStepMessage: 	nil
		lastCycleTime: 	9878933
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:08:39.050875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(689367552))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(3@233)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9917492
		lastStepMessage: 	nil
		lastCycleTime: 	9917519
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9917492
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of OrderedCollection did not understand #length
11 February 2021 11:08:59.807875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>doesNotUnderstand: #length
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		aMessage: 	length
		exception: 	MessageNotUnderstood: OrderedCollection>> #length
		resumeValue: 	ni
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(453729280))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(116@330)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9938218
		lastStepMessage: 	nil
		lastCycleTime: 	9938272
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9938218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:09:28.685875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(219403776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(59@333)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9967108
		lastStepMessage: 	nil
		lastCycleTime: 	9967145
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9967108
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:09:58.407875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(2852352))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(120@375)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	9996853
		lastStepMessage: 	nil
		lastCycleTime: 	9996874
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	9996853
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:11:04.747875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(491720192))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(69@332)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	10063184
		lastStepMessage: 	nil
		lastCycleTime: 	10063209
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	10063184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:11:23.472875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(136562176))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(63@373)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	10081918
		lastStepMessage: 	nil
		lastCycleTime: 	10081938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	10081918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:11:58.366875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(812398080))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(108@328)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	10116807
		lastStepMessage: 	nil
		lastCycleTime: 	10116834
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	10116807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:12:16.035875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(20 9 4 33 45 29 40 28 17)
		hand: 	#('7D' '9C' '4C' '7H' '6S' '3H' '1S' '2H' '4D')
		sorted: 	nil
		sorted1: 	#('2H' '3H' '4C' '4D' '6S' '7D' '1S')
		sorted2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		temp1: 	an OrderedCollection()
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4C' '4D')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '3H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '3H' '7H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection()
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2H' '3H' '6S' '7D' '1S')
		remaining2: 	#('2H' '3H' '4D' '6S' '7H' '9C' '1S')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('1S' '2H' '3H' '4C' '4D' '6S' '7D')
		hand2: 	a SortedCollection('1S' '2H' '3H' '4D' '6S' '7H' '9C')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1070743040) a RubCursor(60616422...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(351869440))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(67@384)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	10134431
		lastStepMessage: 	nil
		lastCycleTime: 	10134502
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	10134431
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
11 February 2021 11:22:14.341875 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(43 34 15 42 30 38 13 24 28)
		hand: 	#('4S' '8H' '2D' '3S' '4H' '12H' '13C' '11D' '2H')
		sorted: 	nil
		sorted1: 	#('2D' '2H' '4H' '4S' '11D' '12H' '13C')
		sorted2: 	#('2H' '3S' '4H' '8H' '11D' '12H' '13C')
		temp1: 	nil
		temp2: 	an OrderedCollection()
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	an OrderedCollection()
		valueStreakB: 	an OrderedCollection()
		valueStreak1: 	an OrderedCollection('4H' '4S')
		valueStreak2: 	an OrderedCollection()
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('2H' '4H' '12H')
		flushOrSuitStreak2: 	an OrderedCollection('2H' '4H' '8H' '12H')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('2D' '2H')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('2D' '2H' '11D' '12H' '13C')
		remaining2: 	#('2H' '3S' '4H' '8H' '11D' '12H' '13C')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11D' '12H' '13C' '2D' '2H' '4H' '4S')
		hand2: 	a SortedCollection('11D' '12H' '13C' '2H' '3S' '4H' '8H')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@202)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(601798656) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(779361792))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(58@382)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEditTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
12 February 2021 12:08:34.943875 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	, 13
		exception: 	MessageNotUnderstood: SmallInteger>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
13

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(50 26 39 3 11 27 20 48 52)
		hand: 	#('11S' '13D' '13H' '3C' '11C' '1H' '7D' '9S' '13S')
		sorted: 	nil
		sorted1: 	#('7D' '9S' '11C' '11S' '13H' '13S' '1H')
		sorted2: 	#('3C' '7D' '9S' '11C' '13D' '13S' '1H')
		temp1: 	13
		temp2: 	13
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('13H' '13S')
		valueStreak2: 	an OrderedCollection('13D' '13S')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('9S' '11S' '13S')
		flushOrSuitStreak2: 	an OrderedCollection('9S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('11C' '11S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('7D' '9S' '11C' '11S' '1H')
		remaining2: 	#('3C' '7D' '9S' '11C' '1H')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11C' '11S' '13H' '13S' '1H' '7D' '9S')
		hand2: 	a SortedCollection('11C' '13D' '13S' '1H' '3C' '7D' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text.THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
12 February 2021 12:09:20.829875 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	, 13
		exception: 	MessageNotUnderstood: SmallInteger>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
13

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(50 26 39 3 11 27 20 48 52)
		hand: 	#('11S' '13D' '13H' '3C' '11C' '1H' '7D' '9S' '13S')
		sorted: 	nil
		sorted1: 	#('7D' '9S' '11C' '11S' '13H' '13S' '1H')
		sorted2: 	#('3C' '7D' '9S' '11C' '13D' '13S' '1H')
		temp1: 	13
		temp2: 	13
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('13H' '13S')
		valueStreak2: 	an OrderedCollection('13D' '13S')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('9S' '11S' '13S')
		flushOrSuitStreak2: 	an OrderedCollection('9S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('11C' '11S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('7D' '9S' '11C' '11S' '1H')
		remaining2: 	#('3C' '7D' '9S' '11C' '1H')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11C' '11S' '13H' '13S' '1H' '7D' '9S')
		hand2: 	a SortedCollection('11C' '13D' '13S' '1H' '3C' '7D' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@259)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(765653504) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(313881600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13559233
		lastStepMessage: 	nil
		lastCycleTime: 	13559296
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13559233
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13559233
		lastStepMessage: 	nil
		lastCycleTime: 	13559296
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13559233
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
12 February 2021 12:09:37.592875 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	, 13
		exception: 	MessageNotUnderstood: SmallInteger>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
13

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(50 26 39 3 11 27 20 48 52)
		hand: 	#('11S' '13D' '13H' '3C' '11C' '1H' '7D' '9S' '13S')
		sorted: 	nil
		sorted1: 	#('7D' '9S' '11C' '11S' '13H' '13S' '1H')
		sorted2: 	#('3C' '7D' '9S' '11C' '13D' '13S' '1H')
		temp1: 	13
		temp2: 	13
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('13H' '13S')
		valueStreak2: 	an OrderedCollection('13D' '13S')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('9S' '11S' '13S')
		flushOrSuitStreak2: 	an OrderedCollection('9S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('11C' '11S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('7D' '9S' '11C' '11S' '1H')
		remaining2: 	#('3C' '7D' '9S' '11C' '1H')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11C' '11S' '13H' '13S' '1H' '7D' '9S')
		hand2: 	a SortedCollection('11C' '13D' '13S' '1H' '3C' '7D' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@259)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(765653504) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(863675392))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(106@337)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13576014
		lastStepMessage: 	nil
		lastCycleTime: 	13576058
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13576014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
12 February 2021 12:09:45.287875 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	, 13
		exception: 	MessageNotUnderstood: SmallInteger>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
13

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(50 26 39 3 11 27 20 48 52)
		hand: 	#('11S' '13D' '13H' '3C' '11C' '1H' '7D' '9S' '13S')
		sorted: 	nil
		sorted1: 	#('7D' '9S' '11C' '11S' '13H' '13S' '1H')
		sorted2: 	#('3C' '7D' '9S' '11C' '13D' '13S' '1H')
		temp1: 	13
		temp2: 	13
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('13H' '13S')
		valueStreak2: 	an OrderedCollection('13D' '13S')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('9S' '11S' '13S')
		flushOrSuitStreak2: 	an OrderedCollection('9S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('11C' '11S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('7D' '9S' '11C' '11S' '1H')
		remaining2: 	#('3C' '7D' '9S' '11C' '1H')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11C' '11S' '13H' '13S' '1H' '7D' '9S')
		hand2: 	a SortedCollection('11C' '13D' '13S' '1H' '3C' '7D' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@259)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(765653504) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(723764224))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(119@380)
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13583715
		lastStepMessage: 	nil
		lastCycleTime: 	13583754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13583715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13583715
		lastStepMessage: 	nil
		lastCycleTime: 	13583754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13583715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13583715
		lastStepMessage: 	nil
		lastCycleTime: 	13583754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13583715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instaTHERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
12 February 2021 12:10:05.189875 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 13
	Arguments and temporary variables: 
		aMessage: 	, 13
		exception: 	MessageNotUnderstood: SmallInteger>> #,
		resumeValue: 	ni
	Receiver's instance variables: 
13

Poker>>deal:
	Receiver: a Poker
	Arguments and temporary variables: 
		shuf: 	#(50 26 39 3 11 27 20 48 52)
		hand: 	#('11S' '13D' '13H' '3C' '11C' '1H' '7D' '9S' '13S')
		sorted: 	nil
		sorted1: 	#('7D' '9S' '11C' '11S' '13H' '13S' '1H')
		sorted2: 	#('3C' '7D' '9S' '11C' '13D' '13S' '1H')
		temp1: 	13
		temp2: 	13
		straight: 	an OrderedCollection()
		straight1: 	an OrderedCollection()
		straight2: 	an OrderedCollection()
		valueStreak: 	an OrderedCollection()
		valueStreakA: 	nil
		valueStreakB: 	nil
		valueStreak1: 	an OrderedCollection('13H' '13S')
		valueStreak2: 	an OrderedCollection('13D' '13S')
		flushOrSuitStreak: 	an OrderedCollection()
		flushOrSuitStreak1: 	an OrderedCollection('9S' '11S' '13S')
		flushOrSuitStreak2: 	an OrderedCollection('9S' '13S')
		straightFlush: 	an OrderedCollection()
		straightFlush1: 	an OrderedCollection()
		straightFlush2: 	an OrderedCollection()
		valueStreak1b: 	an OrderedCollection('11C' '11S')
		valueStreak2b: 	an OrderedCollection()
		remaining1: 	#('7D' '9S' '11C' '11S' '1H')
		remaining2: 	#('3C' '7D' '9S' '11C' '1H')
		flush: 	an OrderedCollection()
		ace1: 	nil
		ace2: 	ni
	Receiver's instance variables: 
		hand1: 	a SortedCollection('11C' '11S' '13H' '13S' '1H' '7D' '9S')
		hand2: 	a SortedCollection('11C' '13D' '13S' '1H' '3C' '7D' '9S')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		poker: 	a Poker
		asw: 	ni
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	| poker asw |
	Transcript clear.
	poker := Poker new.
	asw := poker ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	ni
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(386664704)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(386664704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (350@259)
		owner: 	a TransformWithLayoutMorph(390850304)
		submorphs: 	an Array(a RubPrimarySelectionMorph(765653504) a RubCursor(606164224...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (893030912) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(943935232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606164224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(336159232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(186683648)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13603602
		lastStepMessage: 	nil
		lastCycleTime: 	13603658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13603602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1423@821)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1067345152) a TaskbarMorph(223548416) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1423@821)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (998617856) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13603602
		lastStepMessage: 	nil
		lastCycleTime: 	13603658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13603602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(370517248)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1423@821)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(370517248))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(665768704) named: Pl...etc...
		lastStepTime: 	13603602
		lastStepMessage: 	nil
		lastCycleTime: 	13603658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606164224)))
		lastAlarmTime: 	13603602
		menuBu