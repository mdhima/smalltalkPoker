OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:21:13.169539-05:00' ],		#prior : OmReference [ 'Pharo8.0-SNAPSHOT-32bit-0932da8.302oalmlru6ki0hyj8vba9oxe', '44' ],		#self : OmReference [ '1' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:22:16.145539-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'deal:',			#protocol : #accessing,			#sourceCode : 'deal: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t| sorted data remaining temp straight flushOrSuitStreak straightFlush valueStreak valueStreak2 maxNumOfAKind suitOfAKind suitCards |\r\tself convert: shuf.\r\tTranscript show: \'hand\'; cr.\r\tTranscript show: hand; cr.\r\t\r\tsorted := self sort: hand.\r\tTranscript show: \'sorted\'; cr.\r\tTranscript show: sorted; cr.\r\t"\r\tdata := self getData.\r\tTranscript show: \'data\'; cr.\r\tTranscript show: data; cr.\r\t"\r\tstraight := self getHighestStreak: sorted.\r\tTranscript show: \'straight\'; cr.\r\tTranscript show: straight; cr.\r\t\r\tvalueStreak := self getHighestValueStreak: sorted.\r\tTranscript show: \'valueStreak\'; cr.\r\tTranscript show: valueStreak; cr.\r\t\r\tTranscript show: \'-----\'; cr.\r\tflushOrSuitStreak := self getHighestSuitStreak: sorted.\r\tTranscript show: \'flushOrSuitStreak\'; cr.\r\tTranscript show: flushOrSuitStreak; cr.\r\t\r\tstraightFlush := OrderedCollection new.\r\t(flushOrSuitStreak size > 4) ifTrue: [  \r\t\tstraightFlush := self getHighestStreak: flushOrSuitStreak.\r\t\tTranscript show: \'straightFlush\'; cr.\r\t\tTranscript show: straightFlush; cr.].\r\t\r\t(straightFlush size == 5) ifTrue: [Transcript show: 1; cr. ^straightFlush].\r\t(flushOrSuitStreak size == 4) ifTrue: [Transcript show: 3; cr. ^flushOrSuitStreak].\r\t\r\t\r\tremaining := sorted reject: [:a | valueStreak includes: a ].\r\t\r\tTranscript show: \'remaining\'; cr.\r\tTranscript show: remaining; cr.\r\ttemp := self getHighestValueStreak: remaining.\r\tvalueStreak2 := OrderedCollection new.\r\t(temp size >= 2) ifTrue: [ (temp size -1) to: (temp size) do: [ :i | valueStreak2 add: (temp at: i ) ] ].\r\t\r\t(valueStreak size == 3 & (valueStreak2 size == 2) ) ifTrue: [Transcript show: 4; cr. ^( valueStreak , valueStreak2 )].\r\t(flushOrSuitStreak size == 5) ifTrue: [Transcript show: 5; cr. ^flushOrSuitStreak].\r\t\r\t(valueStreak size == 3) ifTrue: [Transcript show: 7; cr. ^valueStreak].\r\t\r\t^sorted\r\t\r\t\r\t"\r\tmaxNumOfAKind := ((data values) copyFrom: 14 to: 17) inject: 0 into: [:a :c | (a > c )\r   ifTrue: [a]\r   ifFalse: [c]].\r\tTranscript show: maxNumOfAKind; cr.\r\tsuitOfAKind := (data copyFrom: 14 to: 17) keyAtValue: maxNumOfAKind.\r\tTranscript show: suitOfAKind; cr.\r\t\r\tsuitCards := self returnSuitCards: suitOfAKind.\r\tTranscript show: suitOfAKind; cr.\r\t"\r\r\t\r',			#stamp : 'MagdalenaDhima 1/30/2021 21:28',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'deal:',			#protocol : #accessing,			#sourceCode : 'deal: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t| sorted data remaining temp straight flushOrSuitStreak straightFlush valueStreak valueStreak2 maxNumOfAKind suitOfAKind suitCards |\r\tself convert: shuf.\r\t\r\tsorted := self sort: hand.\r\t"\r\tdata := self getData.\r\tTranscript show: \'data\'; cr.\r\tTranscript show: data; cr.\r\t"\r\tstraight := self getHighestStreak: sorted.\r\t\r\tvalueStreak := self getHighestValueStreak: sorted.\r\t\r\tflushOrSuitStreak := self getHighestSuitStreak: sorted.\r\t\r\tstraightFlush := OrderedCollection new.\r\t(flushOrSuitStreak size > 4) ifTrue: [  \r\t\tstraightFlush := self getHighestStreak: flushOrSuitStreak].\r\t\r\t(straightFlush size == 5) ifTrue: [^straightFlush].\r\t(flushOrSuitStreak size == 4) ifTrue: [^flushOrSuitStreak].\r\t\r\t\r\tremaining := sorted reject: [:a | valueStreak includes: a ].\r\t\r\ttemp := self getHighestValueStreak: remaining.\r\tvalueStreak2 := OrderedCollection new.\r\t(temp size >= 2) ifTrue: [ (temp size -1) to: (temp size) do: [ :i | valueStreak2 add: (temp at: i ) ] ].\r\t\r\t(valueStreak size == 3 & (valueStreak2 size == 2) ) ifTrue: [^( valueStreak , valueStreak2 )].\r\t(flushOrSuitStreak size == 5) ifTrue: [^flushOrSuitStreak].\r\t\r\t(valueStreak size == 3) ifTrue: [^valueStreak].\r\t\r\t^sorted\r\t\r\t\r\t"\r\tmaxNumOfAKind := ((data values) copyFrom: 14 to: 17) inject: 0 into: [:a :c | (a > c )\r   ifTrue: [a]\r   ifFalse: [c]].\r\tTranscript show: maxNumOfAKind; cr.\r\tsuitOfAKind := (data copyFrom: 14 to: 17) keyAtValue: maxNumOfAKind.\r\tTranscript show: suitOfAKind; cr.\r\t\r\tsuitCards := self returnSuitCards: suitOfAKind.\r\tTranscript show: suitOfAKind; cr.\r\t"\r',			#stamp : 'MagdalenaDhima 1/30/2021 22:22',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:22:23.754539-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:22:51.817539-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:24:03.991539-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:24:20.868539-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:25:14.761539-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestValueStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestValueStreak: streaks\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| previousCard previous card current valueStreak newList dataInHand maxVal maxCount highestValueStreak |\r\tvalueStreak := OrderedCollection new.\r\tnewList :=  OrderedCollection new.\r\r\tdataInHand := Dictionary new. \r\t1 to: 13 do: [ :i | dataInHand at: i put: newList].\r\t2 to: streaks size do: [ :i | \r\t\tpreviousCard := streaks at: (i-1).\r\t\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\t\tcard := streaks at: i.\r\t\tcurrent := card copyFrom: 1 to: (card size-1).\r\t\t(previous asNumber == current asNumber)\r\t\t\tifTrue: [(valueStreak isEmpty) ifTrue:[valueStreak add: previousCard]. valueStreak add: card]\r\t\t\tifFalse: [(valueStreak size ~= 0) ifTrue: [dataInHand at: previous asNumber put: valueStreak. valueStreak := OrderedCollection new] ] ].\r\t(valueStreak size ~= 0) ifTrue: [dataInHand at: previous put: valueStreak].\r\r\tvalueStreak := OrderedCollection new.\r\tmaxCount := 0.\r\tmaxVal := 0.\r\tdataInHand keysAndValuesDo: [:aKey :aValue | \r\t\t(aValue size > maxCount | (aKey asNumber > maxVal asNumber & (aValue size >= maxCount))) ifTrue: [maxCount := aValue size. maxVal := aKey. valueStreak := aValue] ].\r\t\r\tTranscript show: valueStreak; cr. \r\thighestValueStreak := valueStreak.\r\r\t^highestValueStreak',			#stamp : 'MagdalenaDhima 1/30/2021 21:51',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestValueStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestValueStreak: streaks\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| previousCard previous card current valueStreak newList dataInHand maxVal maxCount highestValueStreak |\r\tvalueStreak := OrderedCollection new.\r\tnewList :=  OrderedCollection new.\r\r\tdataInHand := Dictionary new. \r\t1 to: 13 do: [ :i | dataInHand at: i put: newList].\r\t2 to: streaks size do: [ :i | \r\t\tpreviousCard := streaks at: (i-1).\r\t\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\t\tcard := streaks at: i.\r\t\tcurrent := card copyFrom: 1 to: (card size-1).\r\t\t(previous asNumber == current asNumber)\r\t\t\tifTrue: [(valueStreak isEmpty) ifTrue:[valueStreak add: previousCard]. valueStreak add: card]\r\t\t\tifFalse: [(valueStreak size ~= 0) ifTrue: [dataInHand at: previous asNumber put: valueStreak. valueStreak := OrderedCollection new] ] ].\r\t(valueStreak size ~= 0) ifTrue: [dataInHand at: previous put: valueStreak].\r\r\tvalueStreak := OrderedCollection new.\r\tmaxCount := 0.\r\tmaxVal := 0.\r\tdataInHand keysAndValuesDo: [:aKey :aValue | \r\t\t(aValue size > maxCount | (aKey asNumber > maxVal asNumber & (aValue size >= maxCount))) ifTrue: [maxCount := aValue size. maxVal := aKey. valueStreak := aValue] ].\r\t\r\thighestValueStreak := valueStreak.\r\r\t^highestValueStreak',			#stamp : 'MagdalenaDhima 1/30/2021 22:25',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:27:33.589539-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'convert:',			#protocol : #actions,			#sourceCode : 'convert: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| temp values suits output val |\r\thand := Array new: 9.\r\tvalues := #(\'1\' \'2\' \'3\' \'4\' \'5\' \'6\' \'7\' \'8\' \'9\' \'10\' \'11\' \'12\' \'13\').\r\tsuits := #(\'C\' \'D\' \'H\' \'S\').\r\t1 to: 9 do: [ :i | \r\t\tval := shuf at: i.\r\t\ttemp := val % 13.\r\t\toutput := (temp == 0) \r\t\t\tifFalse: [values at: temp]\r\t\t\tifTrue: [values at: 13]\r\t\t. \r\t\ttemp := val-1 // 13 + 1 floor. \r\t\toutput := output , (suits at: temp). \r\t\thand at: i put: output.\r\t].',			#stamp : 'MagdalenaDhima 1/30/2021 13:03',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'convert:',			#protocol : #actions,			#sourceCode : 'convert: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| temp values suits output val |\r\thand := Array new: 9.\r\tvalues := #(\'1\' \'2\' \'3\' \'4\' \'5\' \'6\' \'7\' \'8\' \'9\' \'10\' \'11\' \'12\' \'13\').\r\tsuits := #(\'C\' \'D\' \'H\' \'S\').\r\t1 to: 9 do: [ :i | \r\t\tval := shuf at: i.\r\t\ttemp := val % 13.\r\t\toutput := (temp == 0) \r\t\t\tifFalse: [values at: temp]\r\t\t\tifTrue: [values at: 13]\r\t\t. \r\t\ttemp := val-1 // 13 floor. \r\t\toutput := output , (suits at: temp). \r\t\thand at: i put: output.\r\t].',			#stamp : 'MagdalenaDhima 1/30/2021 22:27',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:27:37.580539-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:28:25.387539-05:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'convert:',			#protocol : #actions,			#sourceCode : 'convert: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| temp values suits output val |\r\thand := Array new: 9.\r\tvalues := #(\'1\' \'2\' \'3\' \'4\' \'5\' \'6\' \'7\' \'8\' \'9\' \'10\' \'11\' \'12\' \'13\').\r\tsuits := #(\'C\' \'D\' \'H\' \'S\').\r\t1 to: 9 do: [ :i | \r\t\tval := shuf at: i.\r\t\ttemp := val % 13.\r\t\toutput := (temp == 0) \r\t\t\tifFalse: [values at: temp]\r\t\t\tifTrue: [values at: 13]\r\t\t. \r\t\ttemp := val-1 // 13 floor. \r\t\toutput := output , (suits at: temp). \r\t\thand at: i put: output.\r\t].',			#stamp : 'MagdalenaDhima 1/30/2021 22:27',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'convert:',			#protocol : #actions,			#sourceCode : 'convert: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| temp values suits output val |\r\thand := Array new: 9.\r\tvalues := #(\'1\' \'2\' \'3\' \'4\' \'5\' \'6\' \'7\' \'8\' \'9\' \'10\' \'11\' \'12\' \'13\').\r\tsuits := #(\'C\' \'D\' \'H\' \'S\').\r\t1 to: 9 do: [ :i | \r\t\tval := shuf at: i.\r\t\ttemp := val % 13.\r\t\toutput := (temp == 0) \r\t\t\tifFalse: [values at: temp]\r\t\t\tifTrue: [values at: 13]\r\t\t. \r\t\ttemp := val-1 // 13 +1 floor. \r\t\toutput := output , (suits at: temp). \r\t\thand at: i put: output.\r\t].',			#stamp : 'MagdalenaDhima 1/30/2021 22:28',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:28:29.040539-05:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:31:42.703539-05:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}