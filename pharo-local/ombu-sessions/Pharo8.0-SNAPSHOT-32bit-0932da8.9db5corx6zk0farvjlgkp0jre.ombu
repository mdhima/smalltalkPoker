OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:55:55.328546-05:00' ],		#prior : OmReference [ 'Pharo8.0-SNAPSHOT-32bit-0932da8.50hudbuc6ajxc8rlyqp2gushn', '11' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\rsorted :=  (twoDigits asArray) , (threeDigits asArray).\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 13:11',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted :=  (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:55',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:56:28.501546-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted :=  (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:55',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:56',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:58:59.844546-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: a size) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:56',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:58',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T22:59:41.583546-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted , aces.\r\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:58',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted , aces.\rTranscript show: aces; cr.\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:59',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T23:02:13.006546-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted reject: [:a | (a at: (a copyFrom: 1 to: (a size-1))) asNumber == 1 ].\rsorted := sorted , aces.\rTranscript show: aces; cr.\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 22:59',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted reject: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted , aces.\rTranscript show: aces; cr.\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 23:02',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T23:03:06.390546-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted reject: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted , aces.\rTranscript show: aces; cr.\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 23:02',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: shuf\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| threeDigits twoDigits sorted aces |\rthreeDigits := SortedCollection new. \rtwoDigits := SortedCollection new.\r\r1 to: 9 do: [ :i | ((shuf at: i) size == 3) ifTrue: [threeDigits add: (shuf at: i)] ifFalse: [twoDigits add: (shuf at: i)]. ].\r\rsorted := (twoDigits asArray) , (threeDigits asArray).\races := sorted select: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted reject: [:a |  (a copyFrom: 1 to: (a size-1)) asNumber == 1 ].\rsorted := sorted , aces.\rTranscript show: sorted; cr.\r^sorted',			#stamp : 'MagdalenaDhima 1/30/2021 23:03',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T23:13:34.926546-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestStreak: nice\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| streaks notFound previousCard previous card current highestStreak |\rstreaks := OrderedCollection new.\rnotFound := true.\r2 to: nice size do: [ :i | \r\tpreviousCard := nice at: (i-1).\r\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\tcard := nice at: i.\r\tcurrent := card copyFrom: 1 to: (card size-1).\r\t\r\t(previous ~= current) ifTrue: [  \r\t(previous asNumber == (current asNumber -1) & notFound)\r\t\tifTrue: [(streaks isEmpty) ifTrue: [streaks add: previousCard]. streaks add: card]\r\t\tifFalse: [(streaks size < 5) ifTrue: [streaks := OrderedCollection new] ifFalse: [notFound := false]\r] ]].\r\rhighestStreak := OrderedCollection new.\r(streaks size >= 5) \r\tifTrue: [(streaks size -4) to: (streaks size) do: [ :i | highestStreak add: (streaks at: i) ]].\r\r\r^highestStreak',			#stamp : 'MagdalenaDhima 1/30/2021 21:50',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestStreak: nice\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| streaks notFound previousCard previous card current highestStreak |\rstreaks := OrderedCollection new.\rnotFound := true.\r2 to: nice size do: [ :i | \r\tpreviousCard := nice at: (i-1).\r\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\tcard := nice at: i.\r\tcurrent := card copyFrom: 1 to: (card size-1).\r\t(previous ~= current) ifTrue: [  \r\t(previous asNumber == (current asNumber -1) & notFound)\r\t\tifTrue: [(streaks isEmpty) ifTrue: [streaks add: previousCard]. streaks add: card]\r\t\tifFalse: [(streaks size < 5) ifTrue: [streaks := OrderedCollection new] ifFalse: [notFound := false]\r] ]].\r\rhighestStreak := OrderedCollection new.\r(streaks size >= 5) \r\tifTrue: [(streaks size -4) to: (streaks size) do: [ :i | highestStreak add: (streaks at: i) ]].\r\r\r^highestStreak',			#stamp : 'MagdalenaDhima 1/30/2021 23:13',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T23:17:27.218546-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestValueStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestValueStreak: streaks\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| previousCard previous card current valueStreak newList dataInHand maxVal maxCount highestValueStreak |\r\tvalueStreak := OrderedCollection new.\r\tnewList :=  OrderedCollection new.\r\r\tdataInHand := Dictionary new. \r\t1 to: 13 do: [ :i | dataInHand at: i put: newList].\r\t2 to: streaks size do: [ :i | \r\t\tpreviousCard := streaks at: (i-1).\r\t\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\t\tcard := streaks at: i.\r\t\tcurrent := card copyFrom: 1 to: (card size-1).\r\t\t(previous asNumber == current asNumber)\r\t\t\tifTrue: [(valueStreak isEmpty) ifTrue:[valueStreak add: previousCard]. valueStreak add: card]\r\t\t\tifFalse: [(valueStreak size ~= 0) ifTrue: [dataInHand at: previous asNumber put: valueStreak. valueStreak := OrderedCollection new] ] ].\r\t(valueStreak size ~= 0) ifTrue: [dataInHand at: previous put: valueStreak].\r\r\tvalueStreak := OrderedCollection new.\r\tmaxCount := 0.\r\tmaxVal := 0.\r\tdataInHand keysAndValuesDo: [:aKey :aValue | \r\t\t(aValue size > maxCount | (aKey asNumber > maxVal asNumber & (aValue size >= maxCount))) ifTrue: [maxCount := aValue size. maxVal := aKey. valueStreak := aValue] ].\r\t\r\thighestValueStreak := valueStreak.\r\r\t^highestValueStreak',			#stamp : 'MagdalenaDhima 1/30/2021 22:25',			#package : #CPS506		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Poker,				#isMetaSide : false			},			#name : #'getHighestValueStreak:',			#protocol : #accessing,			#sourceCode : 'getHighestValueStreak: streaks\r\t"comment stating purpose of instance-side message"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| previousCard previous card current valueStreak newList dataInHand maxVal maxCount highestValueStreak |\r\tvalueStreak := OrderedCollection new.\r\tnewList :=  OrderedCollection new.\r\r\tdataInHand := Dictionary new. \r\t1 to: 13 do: [ :i | dataInHand at: i put: newList].\r\t\r\t2 to: streaks size do: [ :i | \r\t\tpreviousCard := streaks at: (i-1).\r\t\tprevious := previousCard copyFrom: 1 to: (previousCard size-1).\r\t\tcard := streaks at: i.\r\t\tcurrent := card copyFrom: 1 to: (card size-1).\r\t\t(previous asNumber == current asNumber)\r\t\t\tifTrue: [(valueStreak isEmpty) ifTrue:[valueStreak add: previousCard]. valueStreak add: card]\r\t\t\tifFalse: [(valueStreak size ~= 0) ifTrue: [dataInHand at: previous asNumber put: valueStreak. valueStreak := OrderedCollection new] ] ].\r\t(valueStreak size ~= 0) ifTrue: [dataInHand at: previous put: valueStreak].\r\r\tvalueStreak := OrderedCollection new.\r\tmaxCount := 0.\r\tmaxVal := 0.\r\tdataInHand keysAndValuesDo: [:aKey :aValue | \r\t\t(aValue size > maxCount | (aKey asNumber > maxVal asNumber & (aValue size >= maxCount))) ifTrue: [maxCount := aValue size. maxVal := aKey. valueStreak := aValue] ].\r\t\r\thighestValueStreak := valueStreak.\r\r\t^highestValueStreak',			#stamp : 'MagdalenaDhima 1/30/2021 23:17',			#package : #CPS506		}	}}OmEntry {	#tags : {		#author : 'MagdalenaDhima',		#time : DateAndTime [ '2021-01-30T23:22:04.203546-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\Administrator\\Documents\\Pharo\\images\\Pharo 8.0 - 64bit (stable)\\Pharo 8.0 - 64bit (stable).image'	}}