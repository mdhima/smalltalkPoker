| lista deckwinner shuf here temp values suits output val newShuf card tempCard cardNums cardSuits valueStreaks suitStreaks count previous current sorted |Transcript clear.lista := Array new: 9.1 to: 9 do: [ :i | lista at: i put: (1 to: 52) atRandom].Transcript show: lista; cr.newShuf := Array new: 9.values := #('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13').suits := #('C' 'D' 'H' 'S').1 to: 9 do: [ :i | 	Transcript cr.	Transcript show: i; cr.	val := lista at: i.	Transcript show: val; cr.	temp := val % 13.	Transcript show: temp; cr.	output := (temp == 0) 		ifFalse: [values at: temp]		ifTrue: [values at: 13]	. 	Transcript show: output; cr.	temp := val-1 // 13 + 1 floor. 	Transcript show: temp; cr.	output := output , (suits at: temp). 	Transcript show: output; cr.	newShuf at: i put: output.	Transcript show: newShuf; cr.].cardNums := Bag new: 9.cardSuits := Bag new: 9.Transcript cr.1 to: 9 do: [ :i |	card := newShuf at: i.	cardNums add: (card copyFrom: 1 to: (card size-1)).	cardSuits add: (card at: (card size)).].cardNums := cardNums asArray.cardSuits := cardSuits asArray.Transcript show: cardNums; cr.Transcript show: cardSuits; cr.valueStreaks := Set new.suitStreaks := Set new.count := 1.previous := cardNums at: 1.2 to: 9 do: [ :i |	current := cardNums at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [valueStreaks add: count. count := 1. ].		previous := cardNums at: i.]. count := 1.previous := cardSuits at: 1.2 to: 9 do: [ :i |	current := cardSuits at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [suitStreaks add: count. count := 1. ].		previous := cardSuits at: i.]. sorted := OrderedCollection new.Transcript show: sorted; cr.sorted := cardNums asSortedCollection: [:x :y | (x asNumber) value < (y asNumber) value].Transcript show: sorted; cr.Transcript show: suitStreaks; cr.