| lista deckwinner shuf here temp values suits output val newShuf card tempCard cardNums cardSuits valueStreaks suitStreaks count previous current sorted sorted2 straight flush threeDigits twoDigits nice clubs diamonds hearts spades count2 previous2 temp2 |Transcript clear.lista := Array new: 9.1 to: 9 do: [ :i | lista at: i put: (1 to: 52) atRandom].Transcript show: lista; cr."lista := #(11 9 13 10 8 7 13 6 12).Transcript show: lista; cr."newShuf := Array new: 9.values := #('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13').suits := #('C' 'D' 'H' 'S').1 to: 9 do: [ :i | 	Transcript cr.	Transcript show: i; cr.	val := lista at: i.	Transcript show: val; cr.	temp := val % 13.	Transcript show: temp; cr.	output := (temp == 0) 		ifFalse: [values at: temp]		ifTrue: [values at: 13]	. 	Transcript show: output; cr.	temp := val-1 // 13 + 1 floor. 	Transcript show: temp; cr.	output := output , (suits at: temp). 	Transcript show: output; cr.	newShuf at: i put: output.	Transcript show: newShuf; cr.].cardNums := Bag new: 9.cardSuits := Bag new: 9.Transcript show: 'cards'; cr.Transcript show: newShuf; cr.1 to: 9 do: [ :i |	card := newShuf at: i.	cardNums add: (card copyFrom: 1 to: (card size-1)).	cardSuits add: (card at: (card size)).].cardNums := cardNums asArray.cardSuits := cardSuits asArray.Transcript show: cardNums; cr.Transcript show: cardSuits; cr.valueStreaks := Dictionary new.suitStreaks := Dictionary new.count := 1.previous := cardNums at: 1.2 to: 9 do: [ :i |	current := cardNums at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [valueStreaks at: current put: count. count := 1. ].		previous := cardNums at: i.]. Transcript show: 'streaks of same cards'; cr.Transcript show: valueStreaks; cr.count := 1.previous := cardSuits at: 1.2 to: 9 do: [ :i |	current := cardSuits at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [suitStreaks at: current put: count. count := 1. ].		previous := cardSuits at: i.]. Transcript show: 'streaks of same suits'; cr.Transcript show: valueStreaks; cr.sorted := SortedCollection new.sorted := cardNums asSortedCollection: [:x :y | (x asNumber) < (y asNumber)].Transcript show: 'sorted values'; cr.Transcript show: sorted; cr.sorted2 := Set new.sorted2 := cardNums asSet.sorted := (sorted2 collect: [ :e | e asNumber ]) asSortedCollection .cardNums := sorted asArray.Transcript show: 'unique sorted'; cr.Transcript show: cardNums; cr.straight := False.count := 1.previous := cardNums at: 1.2 to: (cardNums size) do: [ :i | 	current := cardNums at: i.	( ( current - 1 ) == previous & (cardNums size ~= i))	ifTrue: [ count := count + 1. 					( cardNums size == i & (count >= 5) ) 						ifTrue: [straight := True]. ] 	ifFalse: [ (count >= 5 ) 				ifTrue: [ straight := True ]				ifFalse: [ count := 1 ]. 				].	previous := cardNums at: i.].Transcript show: straight; cr.Transcript cr.threeDigits := SortedCollection new. twoDigits := SortedCollection new.Transcript show: newShuf; cr.1 to: 9 do: [ :i | ((newShuf at: i) size == 3) ifTrue: [threeDigits add: (newShuf at: i)] ifFalse: [twoDigits add: (newShuf at: i)]. ].clubs := OrderedCollection new.diamonds := OrderedCollection new.hearts := OrderedCollection new.spades := OrderedCollection new.nice :=  (twoDigits asArray) , (threeDigits asArray).1 to: 9 do: [ :i |    temp := nice at: i.	temp2 := temp at: (temp size).	(temp2 == $C) ifTrue: [clubs add: temp].	(temp2 == $D) ifTrue: [diamonds add: temp].	(temp2 == $H) ifTrue: [hearts add: temp].	(temp2 == $S) ifTrue: [spades add: temp].    ].Transcript show: clubs; cr.Transcript show: diamonds; cr.Transcript show: hearts; cr.Transcript show: spades; cr.Transcript show: nice; cr.valueStreaks := OrderedCollection new.suitStreaks := OrderedCollection new.previous := (newShuf at: 1) at: 1.previous2 := ((newShuf at: 1) copyFrom: 1 to: (card size-1)).count := 1.count2 := 1.2 to: 9 do: [ :i |	card := newShuf at: i.	temp := card at: (card size).	temp2 := (card copyFrom: 1 to: (card size-1)).	previous2 == temp2		ifTrue: [count2 := count2 + 1] ifFalse: [newShuf add: (temp2,count2). count2 := 1. ].	previous == temp		ifTrue: [count := count + 1] ifFalse: [newShuf add: (temp,count). count := 1.].	previous := temp.	previous2 := temp2.].