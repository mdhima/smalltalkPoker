| lista deckwinner shuf here temp values suits output val newShuf card tempCard cardNums cardSuits valueStreaks suitStreaks count previous current sorted sorted2 straight flush threeDigits twoDigits nice clubs diamonds hearts spades count2 previous2 temp2 suitsInHand valuesInHand streaks hand found notFound |Transcript clear.lista := Array new: 9.1 to: 9 do: [ :i | lista at: i put: (1 to: 52) atRandom].Transcript show: lista; cr.lista := #(11 1 2 3 4 5 13 6 12).Transcript show: lista; cr.newShuf := Array new: 9.values := #('1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13').suits := #('C' 'D' 'H' 'S').1 to: 9 do: [ :i | 	Transcript cr.	Transcript show: i; cr.	val := lista at: i.	Transcript show: val; cr.	temp := val % 13.	Transcript show: temp; cr.	output := (temp == 0) 		ifFalse: [values at: temp]		ifTrue: [values at: 13]	. 	Transcript show: output; cr.	temp := val-1 // 13 + 1 floor. 	Transcript show: temp; cr.	output := output , (suits at: temp). 	Transcript show: output; cr.	newShuf at: i put: output.	Transcript show: newShuf; cr.].cardNums := Bag new: 9.cardSuits := Bag new: 9.Transcript show: 'cards'; cr.Transcript show: newShuf; cr.1 to: 9 do: [ :i |	card := newShuf at: i.	cardNums add: (card copyFrom: 1 to: (card size-1)).	cardSuits add: (card at: (card size)).].cardNums := cardNums asArray.cardSuits := cardSuits asArray.Transcript show: cardNums; cr.Transcript show: cardSuits; cr.valueStreaks := Set new.suitStreaks := Set new.count := 1.previous := cardNums at: 1.2 to: 9 do: [ :i |	current := cardNums at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [valueStreaks add: count. count := 1. ].		previous := cardNums at: i.]. Transcript show: 'streaks of same cards'; cr.Transcript show: valueStreaks; cr.count := 1.previous := cardSuits at: 1.2 to: 9 do: [ :i |	current := cardSuits at: i.	( current == previous )		ifTrue: [ count := count + 1.] 		ifFalse: [suitStreaks add: count. count := 1. ].		previous := cardSuits at: i.]. Transcript show: 'streaks of same suits'; cr.Transcript show: suitStreaks; cr.sorted := SortedCollection new.sorted := cardNums asSortedCollection: [:x :y | (x asNumber) < (y asNumber)].Transcript show: 'sorted values'; cr.Transcript show: sorted; cr.sorted2 := Set new.sorted2 := cardNums asSet.sorted := (sorted2 collect: [ :e | e asNumber ]) asSortedCollection .cardNums := sorted asArray.Transcript show: 'unique sorted'; cr.Transcript show: cardNums; cr.straight := False.count := 1.previous := cardNums at: 1.2 to: (cardNums size) do: [ :i | 	current := cardNums at: i.	( ( current - 1 ) == previous & (cardNums size ~= i))	ifTrue: [ count := count + 1. 					( cardNums size == i & (count >= 5) ) 						ifTrue: [straight := True]. ] 	ifFalse: [ (count >= 5 ) 				ifTrue: [ straight := True ]				ifFalse: [ count := 1 ]. 				].	previous := cardNums at: i.].Transcript show: straight; cr.Transcript cr.threeDigits := SortedCollection new. twoDigits := SortedCollection new.Transcript show: newShuf; cr.1 to: 9 do: [ :i | ((newShuf at: i) size == 3) ifTrue: [threeDigits add: (newShuf at: i)] ifFalse: [twoDigits add: (newShuf at: i)]. ].clubs := OrderedCollection new.diamonds := OrderedCollection new.hearts := OrderedCollection new.spades := OrderedCollection new.nice :=  (twoDigits asArray) , (threeDigits asArray).1 to: 9 do: [ :i |    temp := nice at: i.	temp2 := temp at: (temp size).	(temp2 == $C) ifTrue: [clubs add: temp].	(temp2 == $D) ifTrue: [diamonds add: temp].	(temp2 == $H) ifTrue: [hearts add: temp].	(temp2 == $S) ifTrue: [spades add: temp].    ].Transcript show: clubs; cr.Transcript show: diamonds; cr.Transcript show: hearts; cr.Transcript show: spades; cr.Transcript show: nice; cr.suitsInHand := Dictionary new. suitsInHand at: 'C' put: 0. suitsInHand at: 'D' put: 0. suitsInHand at: 'H' put: 0. suitsInHand at: 'S' put: 0.valuesInHand := Dictionary new. 1 to: 13 do: [ :i | valuesInHand at: i put: 0].1 to: 9 do: [ :i |	card := nice at: i.	temp := (card copyFrom: 1 to: (card size-1)).	temp2 := card at: (card size).	valuesInHand at: temp asNumber put: ((valuesInHand at: temp asNumber) +1 ).	suitsInHand at: temp2 asString put: ((suitsInHand at: temp2 asString) +1 ). ].Transcript show: valuesInHand; cr.Transcript show: suitsInHand; cr.Transcript show: cardNums max; cr.streaks := OrderedCollection new.notFound := True.2 to: 9 do: [ :i | 	previous := nice at: (i-1).	previous := previous copyFrom: 1 to: (previous size-1).	card := nice at: i.	current := card copyFrom: 1 to: (card size-1).	Transcript show: previous; cr.	Transcript show: current; cr.	(previous asNumber == (current asNumber -1) & (notFound == True) )		ifTrue: [Transcript show: 'h'; cr. streaks add: card]		ifFalse: [Transcript show: 'i'; cr. (streaks size < 5) ifTrue: [streaks := OrderedCollection new] ifFalse: [notFound := False]]].(streaks size >= 5) 	ifTrue: [(streaks size) to: (streaks size -4) by: -1 do: [ :i | Transcript show: (streaks at: i); cr]].valueStreaks := OrderedCollection new.notFound := true.2 to: 9 do: [ :i | 	previous := nice at: (i-1).	previous := previous copyFrom: 1 to: (previous size-1).	card := nice at: i.	current := card copyFrom: 1 to: (card size-1).	Transcript show: current; cr.	(previous asNumber == (current asNumber -1) & (notFound == true) )		ifTrue: [valueStreaks add: card]		ifFalse: [(valueStreaks size < 5) ifTrue: [valueStreaks := OrderedCollection new] ifFalse: [notFound := false]]].Transcript show: valueStreaks; cr.output := OrderedCollection new.(valueStreaks size >= 5) 	ifTrue: [(valueStreaks size) to: (valueStreaks size -4) by: -1 do: [ :i | output add: (valueStreaks at: i) ]].